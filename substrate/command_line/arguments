// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_COMMAND_LINE_ARGUMENTS
#define SUBSTRATE_COMMAND_LINE_ARGUMENTS

#include <cstddef>
#include <optional>
#include <vector>
#include <variant>
#include <any>
#include <substrate/command_line/options>

namespace substrate::commandLine
{
	namespace internal
	{
		struct tokeniser_t;
	}

	struct choice_t;

	struct flag_t
	{
	private:
		std::string_view _name;
		std::any _value{};

	public:
		flag_t(const std::string_view &name) : _name{name} { }
		flag_t(const std::string_view &name, std::any &&value) : _name{name}, _value{std::move(value)} { }
	};

	struct arguments_t
	{
	private:
		using item_t = std::variant<flag_t, choice_t>;
		std::vector<item_t> _arguments{};

		[[nodiscard]] std::optional<bool> parseArgument(internal::tokeniser_t &lexer, const options_t &options);

	public:
		arguments_t() noexcept = default;

		[[nodiscard]] bool parseFrom(internal::tokeniser_t &lexer, const options_t &options);
	};

	struct choice_t
	{
	private:
		std::string_view _value;
		arguments_t _arguments{};
	};

	 SUBSTRATE_API std::optional<arguments_t>
	 	parseArguments(size_t argCount, const char *const *argList, const options_t &options);
} // namespace substrate::commandLine

#endif /* SUBSTRATE_COMMAND_LINE_ARGUMENTS */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
