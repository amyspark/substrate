// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_CONSOLE
#define SUBSTRATE_CONSOLE

#include <cstdio>
#include <cstddef>
#include <array>
#include <type_traits>
#include <string>
#if __cplusplus >= 201703L
#	include <string_view>
#endif
#include <memory>
#include <mutex>
#include <cstring>
#ifdef _WIN32
#	include <io.h>
#endif

#include <substrate/internal/defs>
#include <substrate/utility>

namespace substrate
{
	inline std::string operator ""_s(const char *str, const size_t len) noexcept { return {str, len}; }
	struct consoleStream_t;

	struct SUBSTRATE_CLS_API printable_t
	{
		printable_t() = default;
		virtual void operator()(const consoleStream_t &) const noexcept = 0;
		virtual ~printable_t() noexcept = default;

		printable_t(const printable_t &) = delete;
		printable_t(printable_t &&) = delete;
		printable_t &operator =(const printable_t &) = delete;
		printable_t &operator =(printable_t &&) = delete;
	};

	struct SUBSTRATE_CLS_API consoleStream_t final
	{
	private:
		int32_t fd{-1};
		bool _tty{false};

		void checkTTY() noexcept;

	public:
		constexpr consoleStream_t() noexcept = default;
		consoleStream_t(const int32_t desc) noexcept : fd{desc} { checkTTY(); }
		constexpr bool valid() const noexcept { return fd != -1; }
		constexpr bool isTTY() const noexcept { return _tty; }
#if defined(_WIN32)
		void *handle() const noexcept { return reinterpret_cast<void *>(_get_osfhandle(fd)); }
#endif

		void write(const void *buffer, size_t bufferLen) const noexcept;
		void write(const char *value) const noexcept;
		void write(const char value) const noexcept { write(&value, 1); }
		template<typename T> enable_if_t<!std::is_array<T>::value>
			write(const std::unique_ptr<T> &value) const noexcept
			{ value ? write(*value) : write("(null)"_s); }
		// NOLINTNEXTLINE(modernize-avoid-c-arrays, cppcoreguidelines-avoid-c-arrays)
		template<typename T> void write(const std::unique_ptr<T []> &value) const noexcept
			{ write(value.get()); }
		void write(const std::string &value) const noexcept
			{ write(value.data(), value.length()); }
#if __cplusplus >= 201703L
		void write(const std::string_view &value) const noexcept
			{ write(value.data(), value.length()); }
#endif
		template<typename T, typename = enable_if_t<std::is_base_of<printable_t, T>::value>>
			void write(T &&printable) const noexcept { printable(*this); }
		template<typename T> enable_if_t<is_numeric<T>::value && !std::is_enum<T>::value>
			write(T value) const noexcept;
		template<typename T> enable_if_t<std::is_enum<T>::value> write(const T value) const noexcept
			{ write(static_cast<typename std::underlying_type<T>::type>(value)); }
		template<typename T> void write(const T *ptr) const noexcept;
		void write(bool value) const noexcept;
		template<size_t N> void write(const std::array<char, N> &value) const noexcept;
		template<typename T, size_t N> void write(const std::array<T, N> &value) const noexcept;
	};

	struct SUBSTRATE_CLS_API console_t final
	{
	private:
		mutable std::mutex consoleMutex{};
		consoleStream_t outputStream{};
		consoleStream_t errorStream{};
		bool valid_{false};
		bool showDebug_{true};

		static void write(const consoleStream_t &stream) noexcept { stream.write('\n'); }
		void write(const consoleStream_t &, std::nullptr_t) const noexcept { }
		template<typename T, typename... U> void write(const consoleStream_t &stream,
			T &&value, U &&...values) const noexcept
		{
			stream.write(std::forward<T>(value));
			write(stream, std::forward<U>(values)...);
		}

		void _error() const noexcept;
		void _warning() const noexcept;
		void _info() const noexcept;
		void _debug() const noexcept;

	public:
		console_t() noexcept = default;
		console_t(FILE *outStream, FILE *errStream) noexcept;
		console_t(const int32_t outStream, const int32_t errStream) noexcept :
			outputStream{outStream}, errorStream{errStream}, valid_{outputStream.valid() && errorStream.valid()} { }
		console_t(const console_t &) noexcept = delete;
		console_t(console_t &&other) noexcept : console_t{} { swap(other); }
		~console_t() noexcept = default;
		console_t operator =(const console_t &) noexcept = delete;
		bool valid() const noexcept { return valid_; }

		console_t &operator =(console_t &&other) noexcept
		{
			swap(other);
			return *this;
		}

		template<typename... T> void error(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			_error();
			write(errorStream, std::forward<T>(values)...);
		}

		template<typename... T> void warning(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			_warning();
			write(outputStream, std::forward<T>(values)...);
		}

		template<typename... T> void warn(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			_warning();
			write(outputStream, std::forward<T>(values)...);
		}

		template<typename... T> void info(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			_info();
			write(outputStream, std::forward<T>(values)...);
		}

		template<typename... T> void debug(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			if (showDebug_)
			{
				_debug();
				write(outputStream, std::forward<T>(values)...);
			}
		}

		template<typename... T> void writeln(T &&...values) const noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> lock){consoleMutex};
			write(outputStream, std::forward<T>(values)...);
		}

		void showDebug(const bool show) noexcept
			{ showDebug_ = show; }
		void dumpBuffer();

		void swap(console_t &other) noexcept
		{
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> ourLock){consoleMutex};
			SUBSTRATE_NOWARN_UNUSED(std::lock_guard<std::mutex> theirLock){other.consoleMutex};

			std::swap(outputStream, other.outputStream);
			std::swap(errorStream, other.errorStream);
			std::swap(valid_, other.valid_);
			std::swap(showDebug_, other.showDebug_);
		}
	};

	template<typename int_t> struct asInt_t final : public printable_t
	{
	private:
		using uint_t = typename std::make_unsigned<int_t>::type;
		int_t value_;

		SUBSTRATE_NOINLINE uint_t format(const consoleStream_t &stream, const uint_t number) const noexcept
		{
			if (number < 10)
				stream.write(char(number + '0'));
			else
			{
				const char value = char(char(number - format(stream, number / 10) * 10) + '0');
				stream.write(value);
			}
			return number;
		}

		template<typename T> enable_if_t<std::is_same<T, int_t>::value &&
			std::is_integral<T>::value && !is_boolean<T>::value && std::is_unsigned<T>::value>
			printTo(const consoleStream_t &stream) const noexcept { format(stream, value_); }

		template<typename T> SUBSTRATE_NOINLINE enable_if_t<std::is_same<T, int_t>::value &&
			std::is_integral<T>::value && !is_boolean<T>::value && std::is_signed<T>::value>
			printTo(const consoleStream_t &stream) const noexcept
		{
			if (value_ < 0)
			{
				stream.write('-');
				format(stream, uint_t(uint_t(~uint_t(value_)) + 1U));
			}
			else
				format(stream, uint_t(value_));
		}

	public:
		constexpr asInt_t(const int_t value) noexcept : value_{value} { }
		void operator()(const consoleStream_t &stream) const noexcept final
			{ printTo<int_t>(stream); }
	};

	template<size_t paddedWidth, char paddingChar> struct writePadding_t final
	{
		void operator ()(const consoleStream_t &stream, const uint8_t maxDigits) const noexcept
		{
			if (maxDigits < paddedWidth)
			{
				// Put out the excess padding early to keep the logic simple.
				for (uint8_t i{0}; i < paddedWidth - maxDigits; ++i)
					stream.write(paddingChar);
			}
		}
	};

	template<char paddingChar> struct writePadding_t<0, paddingChar> final
		{ void operator ()(const consoleStream_t &, const uint8_t) const noexcept { } };

	template<size_t paddedWidth = 0, char paddingChar = ' '> struct asHex_t final : public printable_t
	{
	private:
		uint8_t maxDigits;
		uint8_t msbShift;
		uintmax_t _value;

	public:
		template<typename T, typename = enable_if_t<std::is_unsigned<T>::value>>
			constexpr asHex_t(const T value) noexcept : maxDigits{sizeof(T) * 2},
			msbShift{uint8_t(4U * (maxDigits - 1U))}, _value(value) { }

		SUBSTRATE_NOINLINE
		void operator ()(const consoleStream_t &stream) const noexcept final
		{
			uintmax_t value{_value};
			// If we've been asked to pad by more than the maximum possible length of the number
			writePadding_t<paddedWidth, paddingChar>{}(stream, maxDigits);

			uint8_t digits{maxDigits};
			// For up to the maximum number of digits, pad as needed
			for (; digits > 1; --digits)
			{
				const uint8_t nibble((value >> msbShift) & 0x0FU);
				if (nibble == 0)
					value <<= 4;
				if (digits > paddedWidth && nibble == 0)
					continue;
				else if (digits <= paddedWidth && nibble == 0)
					stream.write(paddingChar);
				else
					break;
				// if 0 and paddedWidth == 0, we don't output anything here.
			}

			for (; digits > 0; --digits)
			{
				const uint8_t nibble((value >> msbShift) & 0x0FU);
				const char digit = char(nibble + '0');
				if (digit > '9')
					stream.write(char(digit + 7));
				else
					stream.write(digit);
				value <<= 4;
			}
		}
	};

	template<typename T> enable_if_t<is_numeric<T>::value && !std::is_enum<T>::value>
		consoleStream_t::write(const T value) const noexcept { write(asInt_t<T>{value}); }

	template<typename T> void consoleStream_t::write(const T *const ptr) const noexcept
	{
		write("0x"_s);
		write(asHex_t<8, '0'>{
			// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
			reinterpret_cast<uintptr_t>(ptr) // lgtm[cpp/reinterpret-cast]
		});
	}

	template<size_t N> void consoleStream_t::write(const std::array<char, N> &value) const noexcept
	{
		for (const auto &elem : value)
			write(elem);
	}

	template<typename T, size_t N> void consoleStream_t::write(const std::array<T, N> &value) const noexcept
	{
		bool comma{false};
		for (const auto &elem : value)
		{
			if (comma)
				write(", "_s);
			comma = true;
			write(asHex_t<sizeof(T) * 2, '0'>{elem});
		}
	}

	struct SUBSTRATE_CLS_API asTime_t final : public printable_t
	{
	private:
		uint64_t value;

	public:
		constexpr asTime_t(const uint64_t _value) noexcept : value{_value} { }

		void operator ()(const consoleStream_t &stream) const noexcept final
		{
			asInt_t<uint64_t>{value / 60}(stream);
			stream.write("m "_s);
			asInt_t<uint64_t>{value % 60}(stream);
			stream.write("s"_s);
		}
	};

	SUBSTRATE_API console_t console;
} // namespace substrate
#endif /*SUBSTRATE_CONSOLE*/
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
