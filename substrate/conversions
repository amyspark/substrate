// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_CONVERSIONS
#define SUBSTRATE_CONVERSIONS

#include <type_traits>
#include <utility>
#include <string>
#include <chrono>
#include <substrate/utility>
#include <substrate/internal/defs>

namespace substrate
{
	template<typename int_t, typename valueType_t, size_t _length = static_cast<std::size_t>(-1), char padding = '0'>
		struct fromInt_t
	{
	public:
		constexpr static const auto npos{static_cast<std::size_t>(-1)};

	private:
		using uint_t = make_unsigned_t<int_t>;
		const valueType_t &_value;

		SUBSTRATE_NO_DISCARD(constexpr uint8_t calcDigits(const uint_t number) const noexcept)
			{ return 1 + (number < 10 ? 0 : calcDigits(number / 10)); }

		SUBSTRATE_NO_DISCARD(constexpr uint8_t digits(const int_t number) const noexcept)
			{ return std::is_signed<int_t>::value && number < 0 ? 1 + calcDigits(-number) : calcDigits(number); }

		SUBSTRATE_NO_DISCARD(constexpr size_t power10(const size_t power) const noexcept)
			{ return power ? power10(power - 1) * 10 : 1; }

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR uint8_t zeros(const int_t number) const noexcept)
		{
			const int_t num{number / 10};
			return (num * 10 == number ? 1 + zeros(num) : 0);
		}

		template<typename R, typename P> SUBSTRATE_CXX14_CONSTEXPR uint8_t
			zeros(const std::chrono::duration<R, P> &number) const noexcept
				{ return zeros(number.count()); }

		SUBSTRATE_NO_DISCARD(constexpr uint8_t hexDigits(const uint_t number) const noexcept)
			{ return 1 + (number < 16 ? 0 : hexDigits(number >> 4)); }

		template<typename value_t> constexpr enable_if_t<!is_duration<value_t>::value, int_t>
			valueAsInt(const value_t &number) const noexcept { return number; }

		template<typename R, typename P> constexpr int_t
			valueAsInt(const std::chrono::duration<R, P> &number) const noexcept
				{ return number.count(); }

		[[gnu::noinline]] SUBSTRATE_CXX14_CONSTEXPR uint_t process(const uint_t number, char *const buffer,
			const uint8_t digits, const size_t index) const noexcept
		{
			if (number < 10)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				buffer[digits - index] = number + '0';
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				buffer[digits + 1] = 0;
			}
			else
			{
				const uint_t num = number - (process(number / 10, buffer, digits, index + 1) * 10);
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				buffer[digits - index] = num + '0';
			}
			return number;
		}

		SUBSTRATE_CXX14_CONSTEXPR void process(const uint_t number, char *const buffer) const noexcept
			{ process(number, buffer, digits() - 1, 0); }
		template<typename T = int_t> SUBSTRATE_CXX14_CONSTEXPR enable_if_t<std::is_same<T, int_t>::value &&
			std::is_integral<T>::value && !is_boolean<T>::value && std::is_unsigned<T>::value && _length == npos>
			format(char *const buffer) const noexcept { process(valueAsInt(_value), buffer); }
		template<typename T = int_t> [[gnu::noinline]] SUBSTRATE_CXX14_CONSTEXPR
			enable_if_t<std::is_same<T, int_t>::value && std::is_integral<T>::value && !is_boolean<T>::value &&
			std::is_signed<T>::value && _length == npos> format(char *const buffer) const noexcept
		{
			const auto value{valueAsInt(_value)};
			if (value < 0)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				buffer[0] = '-';
				process(uint_t(-value), buffer);
			}
			else
				process(uint_t(value), buffer);
		}

		SUBSTRATE_CXX14_CONSTEXPR void formatFixed(char *const buffer, const uint_t value) const noexcept
		{
			const auto length{calcDigits(value)};
			if (length <=  _length)
			{
				const auto offset{_length - length};
				const auto _buffer{std::fill_n(buffer, offset, padding)};
				process(value, _buffer, length - 1, 0);
			}
			else
				std::fill_n(buffer, _length, padding);
		}

		template<typename T = int_t> SUBSTRATE_CXX14_CONSTEXPR enable_if_t<std::is_same<T, int_t>::value &&
			std::is_integral<T>::value && !is_boolean<T>::value && std::is_unsigned<T>::value && _length != npos>
			format(char *const buffer) const noexcept { formatFixed(buffer, valueAsInt(_value)); }

		template<typename T = int_t> [[gnu::noinline]] SUBSTRATE_CXX14_CONSTEXPR
			enable_if_t<std::is_same<T, int_t>::value && std::is_integral<T>::value && !is_boolean<T>::value &&
			std::is_signed<T>::value && _length != npos> format(char *const buffer) const noexcept
		{
			const auto value{valueAsInt(_value)};
			if (value < 0)
			{
				const auto length{digits(value)};
				if (length <= _length)
				{
					const auto offset{_length - length};
					// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
					const auto _buffer{std::fill_n(buffer + 1, offset, padding)};
					process(uint_t(-value), _buffer, length - 2, 0);
				}
				else
					std::fill_n(buffer, _length, padding);
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				buffer[0] = '-';
			}
			else
				formatFixed(buffer, uint_t(value));
		}

		void formatHex(std::string &result, const bool upperCase) const noexcept
		{
			auto value{valueAsInt(_value)};
			auto digit{result.rbegin() + 1};
			while (digit != result.rend())
			{
				auto hex{uint8_t(value & 0x0FU)};
				value >>= 4U;
				if (hex > 9U)
				{
					hex += 0x07U;
					if (!upperCase)
						hex += 0x20U;
				}
				*digit++ = char(hex + 0x30U);
				if (!value)
					break;
			}
			std::fill_n(result.begin(), result.rend() - digit, padding);
		}

		SUBSTRATE_CXX14_CONSTEXPR void formatFraction(const uint8_t maxDigits, char *const buffer) const noexcept
		{
			const auto value{valueAsInt(_value)};
			const auto digits_{digits(value)};
			if (digits_ > maxDigits)
				process(value - ((value / power10(maxDigits)) * power10(maxDigits)), buffer, maxDigits - 1, 0);
			else
			{
				const uint8_t trailingZeros_ = trailingZeros();
				const uint8_t leadingZeros = maxDigits - digits_;
				for (uint8_t i{0}; i < leadingZeros; ++i)
					// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
					buffer[i] = '0';
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				process(value / power10(trailingZeros_), buffer + leadingZeros, digits_ - trailingZeros_ - 1, 0);
			}
		}

	public:
		constexpr fromInt_t(const valueType_t &value) noexcept : _value(value) { }

		// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)
		SUBSTRATE_NO_DISCARD(operator std::unique_ptr<char []>() const noexcept)
		{
			// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)
			auto number{make_unique_nothrow<char []>(length())};
			if (!number)
				return nullptr;
			format(number.get());
			return number;
		}

		SUBSTRATE_NO_DISCARD(explicit operator const char *() const noexcept)
		{
			// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)
			std::unique_ptr<char []> number{*this};
			return number.release();
		}

		SUBSTRATE_NO_DISCARD(operator std::string() const)
		{
			std::string number(length(), '\0');
#if __cplusplus >= 201703L
			format(number.data());
#else
			format(&number.front());
#endif
			return number;
		}

		template<typename T = int_t> enable_if_t<std::is_same<T, int_t>::value && std::is_unsigned<T>::value,
			std::string> toHex(const bool upper = true) const noexcept
		{
			std::string number(hexLength(), '\0');
			formatHex(number, upper);
			return number;
		}

		SUBSTRATE_NO_DISCARD(std::string toDec() const noexcept) { return *this; }
		SUBSTRATE_NO_DISCARD(constexpr uint8_t digits() const noexcept) { return digits(valueAsInt(_value)); }
		SUBSTRATE_NO_DISCARD(constexpr std::size_t length() const noexcept)
			{ return _length == npos ? digits() + 1 : _length + 1; }
		SUBSTRATE_NO_DISCARD(constexpr std::size_t hexLength() const noexcept)
			{ return _length == npos ? hexDigits(valueAsInt(_value)) + 1 : _length + 1; }
		SUBSTRATE_CXX14_CONSTEXPR void formatTo(char *const buffer) const noexcept { format(buffer); }

		// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)
		SUBSTRATE_NO_DISCARD(std::unique_ptr<char []> formatFraction(const uint8_t maxDigits) const noexcept)
		{
			// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays)
			auto number{make_unique_nothrow<char []>(fractionLength(maxDigits))};
			if (!number)
				return nullptr;
			formatFraction(maxDigits, number.get());
			return number;
		}

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR uint8_t fractionDigits(const uint8_t maxDigits) const noexcept)
		{
			const uint8_t digits_ = digits();
			if (digits_ > maxDigits)
				return maxDigits;
			return (maxDigits - digits_) + (digits_ - trailingZeros());
		}

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR uint8_t trailingZeros() const noexcept)
			{ return valueAsInt(_value) ? zeros(_value) : 0; }
		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR uint8_t fractionLength(const uint8_t maxDigits) const noexcept)
			{ return fractionDigits(maxDigits) + 1; }
		void formatFractionTo(const uint8_t maxDigits, char *const buffer) const noexcept
			{ formatFraction(maxDigits, buffer); }
	};

#if __cplusplus >= 201703L
	template<typename value_t> fromInt_t(value_t) -> fromInt_t<value_t, value_t>;
#endif

	template<typename value_t>
		constexpr inline fromInt_t<value_t, value_t> fromInt(const value_t &value) { return {value}; }
	template<typename int_t, typename value_t>
		constexpr inline fromInt_t<int_t, value_t> fromInt(const value_t &value) { return {value}; }

	template<typename int_t> struct toInt_t
	{
	private:
		using uint_t = make_unsigned_t<int_t>;
		const char *const _value{nullptr};
		const size_t _length{};
		constexpr static const bool _isSigned = std::is_signed<int_t>::value;

		SUBSTRATE_NO_DISCARD(constexpr static bool isNumber(const char x) noexcept) { return x >= '0' && x <= '9'; }
		SUBSTRATE_NO_DISCARD(constexpr static bool isHex(const char x) noexcept)
			{ return isNumber(x) || (x >= 'a' && x <= 'f') || (x >= 'A' && x <= 'F'); }
		SUBSTRATE_NO_DISCARD(constexpr static bool isOct(const char x) noexcept) { return x >= '0' && x <= '7'; }

		template<bool isFunc(const char)> SUBSTRATE_CXX14_CONSTEXPR bool checkValue() const noexcept
		{
			for (size_t i{}; i < _length; ++i)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				if (!isFunc(_value[i]))
					return false;
			}
			return true;
		}

	public:
		SUBSTRATE_CXX17_CONSTEXPR toInt_t(const char *const value) noexcept :
			_value{value}, _length{std::char_traits<char>::length(value)} { }
		constexpr toInt_t(const char *const value, const size_t subLength) noexcept :
			_value{value}, _length{subLength} { }
		constexpr size_t length() const noexcept { return _length; }

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR bool isDec() const noexcept)
		{
			// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
			if (_isSigned && _length > 0 && _value[0] == '-' && length() == 1)
				return false;
			for (size_t i{}; i < _length; ++i)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				if (_isSigned && i == 0 && _value[i] == '-')
					continue;
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				else if (!isNumber(_value[i]))
					return false;
			}
			return true;
		}

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR bool isHex() const noexcept) { return checkValue<isHex>(); }
		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR bool isOct() const noexcept) { return checkValue<isOct>(); }
		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR int_t fromDec() const noexcept) { return *this; }

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR operator int_t() const noexcept)
		{
			if (!isDec())
				return {};
			uint_t result{};
			for (size_t i{}; i < _length; ++i)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				if (_isSigned && i == 0 && _value[i] == '-')
					continue;
				result *= 10;
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				result += _value[i] - '0';
			}
			// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
			if (_isSigned && _length > 0 && _value[0] == '-')
				return -static_cast<int_t>(result);
			return static_cast<int_t>(result);
		}

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR int_t fromHex() const noexcept)
		{
			if (!isHex())
				return {};
			int_t value{};
			for (size_t i{}; i < _length; ++i)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				uint8_t hex = _value[i];
				if (hex >= 'a' && hex <= 'f')
					hex -= 0x20;
				value <<= 4;
				hex -= 0x30;
				if (hex > 9)
					hex -= 0x07;
				value += hex;
			}
			return value;
		}

		SUBSTRATE_NO_DISCARD(SUBSTRATE_CXX14_CONSTEXPR int_t fromOct() const noexcept)
		{
			if (!isOct())
				return {};
			int_t result{};
			for (size_t i{}; i < _length; ++i)
			{
				result <<= 3;
				// NOLINTNEXTLINE(cppcoreguidelines-pro-bounds-pointer-arithmetic)
				result += _value[i] - 0x30;
			}
			return result;
		}
	};
}

#endif /*SUBSTRATE_CONVERSIONS*/
