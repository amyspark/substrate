// SPDX-License-Identifier: BSD-3-Clause

#ifndef SUBSTRATE_THREADED_QUEUE
#define SUBSTRATE_THREADED_QUEUE

#include <atomic>
#include <condition_variable>
#include <mutex>
#include <queue>
#include <utility>

#include "internal/defs"

namespace substrate
{
	template<typename T> struct threadedQueue_t final
	{
	private:
		std::queue<T> queue{};
		std::mutex queueMutex{};
		std::condition_variable haveData{};
		std::atomic<size_t> queueLength{0};

	public:
		template<typename... args_t> inline void emplace(args_t &&...args) noexcept
		{
			std::lock_guard<std::mutex> lock{queueMutex};
			queue.emplace(std::forward<args_t>(args)...);
			++queueLength;
			haveData.notify_one();
		}

		inline void push(T &&value) noexcept
		{
			std::lock_guard<std::mutex> lock{queueMutex};
			queue.push(std::move(value));
			++queueLength;
			haveData.notify_one();
		}

		SUBSTRATE_NO_DISCARD(inline T pop() noexcept)
		{
			std::unique_lock<std::mutex> lock{queueMutex};
			const auto dataReceived
			{
				[&]() noexcept -> bool { return queueLength; }
			};
			if (!queueLength)
				haveData.wait(lock, dataReceived);
			--queueLength;
			const auto result{queue.front()};
			queue.pop();
			return result;
		}

		SUBSTRATE_NO_DISCARD(inline bool empty() const noexcept) { return !queueLength; }
		SUBSTRATE_NO_DISCARD(inline std::size_t size() const noexcept) { return queueLength; }
	};
} // namespace substrate

#endif /* SUBSTRATE_THREADED_QUEUE */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
