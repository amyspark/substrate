// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_POINTER_UTILS
#define SUBSTRATE_POINTER_UTILS

#include <functional>
#include <memory>

#include "internal/defs"
#include "utility"

#if __cplusplus >= 201304L
#define SUBSTRATE_SUPPORTS_MANAGED_TUPLE

namespace substrate
{
	template<typename, typename...> class managedTupleWithValues_t;
	template<typename, typename...> class managedTuple_t;

	template<typename R, typename... Args, typename... Vals> class managedTupleWithValues_t<R(Args...), Vals...>
	{
		static_assert(sizeof...(Args) == sizeof...(Vals), "Mismatching arguments and variable types! Did you override them all?");
		static_assert(sizeof...(Args) > 0, "You can't run a deleter with no arguments");
		static_assert(sizeof...(Vals) > 0, "You can't run a deleter against no variables");

	public:
		managedTupleWithValues_t(std::function<R(Args...)> releaser) : function(std::move(releaser)) {}

		managedTupleWithValues_t(managedTupleWithValues_t &) = delete;
		managedTupleWithValues_t operator=(managedTupleWithValues_t &) = delete;
		managedTupleWithValues_t(managedTupleWithValues_t &&) noexcept = default;
		managedTupleWithValues_t &operator=(managedTupleWithValues_t &&) noexcept = default;

		template<size_t I> inline auto & get() noexcept
			{ return std::get<I>(elements); }

		inline constexpr size_t size() const
			{ return std::tuple_size<decltype(elements)>::value; }

		~managedTupleWithValues_t()
			{ execute<Args...>(std::index_sequence_for<Args...>{}); }

	private:
		std::function<R(Args...)> function;
		std::tuple<pure_type_t<Vals>...> elements{};

#if __cplusplus >= 201703L
		template<typename Argument, typename Value>
			inline constexpr Argument argFor(Value &&value) const
		{
			if constexpr (std::is_pointer_v<Argument> &&
				!std::is_pointer_v<std::remove_reference_t<Value>>)
				return &value;
			else if constexpr (!std::is_pointer_v<Argument> &&
				std::is_pointer_v<std::remove_reference_t<Value>>)
				return *value;
			else
				return value;
		}
#else
		template<typename Argument, typename Value, typename std::enable_if<std::is_convertible<Argument, Value&&>::value, bool>::type = true>
			inline constexpr Argument argFor(Value &&value) const
			{ return value;	}

		template<typename Argument, typename Value, typename std::enable_if<requires_reference<Argument, Value>::value, bool>::type = true>
			inline constexpr Argument argFor(Value &&value) const
		{
			static_assert(std::is_convertible<Argument, typename std::add_pointer<typename std::remove_reference<Value>::type>::type>::value, "This argument type is incompatible");
			return &value;
		}

		template<typename Argument, typename Value, typename std::enable_if<requires_dereference<Argument, Value>::value, bool>::type = true>
			inline constexpr Argument argFor(Value &&value) const
		{
			static_assert(std::is_convertible<Argument, typename std::add_rvalue_reference<Value&&>::type>::value, "This argument type is incompatible");
			return *value;
		}
#endif

		template<typename... Arguments, size_t ...I>
			inline void execute(std::index_sequence<I...>)
			{ function(argFor<Arguments>(std::get<I>(elements))...); }
	};

	template<typename R, typename... Args> class managedTuple_t<R(Args...)> :
		public managedTupleWithValues_t<R(Args...), Args...>
	{
	public:
		managedTuple_t(std::function<R(Args...)> releaser) :
			managedTupleWithValues_t<R(Args...), Args...>(std::move(releaser)) {}
	};

SUBSTRATE_DEDUCTION_GUIDE(
	template<typename R, typename... Args, typename... Vals> managedTupleWithValues_t(R (*)(Args...), Vals...) -> managedTupleWithValues_t<R(Args...), Vals...>;
 	template<typename R, typename... Args> managedTupleWithValues_t(R (*)(Args...)) -> managedTupleWithValues_t<R(Args...), Args...>;
	template<typename R, typename... Args> managedTuple_t(R (*)(Args...)) -> managedTuple_t<R(Args...)>;
)
} // namespace substrate

#endif

namespace substrate
{
	template<typename ValueType, typename ReturnType, ReturnType (*Deleter)(ValueType *)>
		struct naughtyPtr_t : public std::shared_ptr<ValueType>
	{
	private:
		static void deleter(ValueType* value)
		{
			if (value != nullptr)
				Deleter(value);
		}

	public:
		naughtyPtr_t() : std::shared_ptr<ValueType>{nullptr, deleter} { }

		template<typename... Args> naughtyPtr_t(Args &&...args) :
			std::shared_ptr<ValueType>{std::forward<Args>(args)..., deleter} { }
	};

	template<typename> struct deleter_type;
	template<typename R, typename T> struct deleter_type<R(T *)>
	{
		using value_type = T;
		using return_type = R;
	};

	template<typename T, T t, typename D = deleter_type<T>>
	struct nicePtr_t : public naughtyPtr_t<typename D::value_type, 
		typename D::return_type, t>
	{
	public:
		nicePtr_t() = default;
		template<typename... Args> nicePtr_t(Args &&...args) :
			naughtyPtr_t<typename D::value_type, typename D::return_type, t>{std::forward<Args>(args)...} { }
	};
} // namespace substrate

#endif
