// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_UTILITIES
#define SUBSTRATE_UTILITIES

#include <type_traits>
#include <typeinfo>
#include <memory>
#include <string>

#ifndef _MSC_VER
#include <cxxabi.h>
#endif

namespace substrate
{
/* C++ 14 helpers */
#if __cplusplus >= 201402L
	template<bool B, class T = void>
	using enable_if_t = typename std::enable_if_t<B, T>;

	template<typename T>
	using underlying_type_t = typename std::underlying_type_t<T>;

	template<bool B, class T, class F>
	using conditional_t = typename std::conditional_t<B, T, F>;

	template<class T>
	using remove_reference_t = typename std::remove_reference_t<T>;

	template<class T>
	using remove_cv_t = typename std::remove_cv_t<T>;

	template<class T>
	using remove_const_t = typename std::remove_const_t<T>;

	template<class T>
	using remove_volatile_t = typename std::remove_volatile_t<T>;

	template<class T>
	using remove_extent_t = typename std::remove_extent_t<T>;

	template<class T>
	using add_cv_t = typename std::add_cv_t<T>;

	template<class T>
	using add_const_t = typename std::add_const_t<T>;

	template<class T>
	using add_volatile_t = typename std::add_volatile_t<T>;

	template<class T>
	using add_lvalue_reference_t = typename std::add_lvalue_reference_t<T>;

	template<class T>
	using add_rvalue_reference_t = typename std::add_rvalue_reference_t<T>;

	template<class T>
	using remove_pointer_t = typename std::remove_pointer_t<T>;

	template<class T>
	using add_pointer_t = typename std::add_pointer_t<T>;

	template<class T>
	using make_signed_t = typename std::make_signed_t<T>;

	template<class T>
	using make_unsigned_t = typename std::make_unsigned_t<T>;
#else
	template<bool B, class T = void>
	using enable_if_t = typename std::enable_if<B,T>::type;

	template<typename T>
	using underlying_type_t = typename std::underlying_type<T>::type;

	template<bool B, class T, class F>
	using conditional_t = typename std::conditional<B, T, F>::type;

	template<class T>
	using remove_reference_t = typename std::remove_reference<T>::type;

	template<class T>
	using remove_cv_t = typename std::remove_cv<T>::type;

	template<class T>
	using remove_const_t = typename std::remove_const<T>::type;

	template<class T>
	using remove_volatile_t = typename std::remove_volatile<T>::type;

	template<class T>
	using remove_extent_t = typename std::remove_extent<T>::type;

	template<class T>
	using add_cv_t = typename std::add_cv<T>::type;

	template<class T>
	using add_const_t = typename std::add_const<T>::type;

	template<class T>
	using add_volatile_t = typename std::add_volatile<T>::type;

	template<class T>
	using add_lvalue_reference_t = typename std::add_lvalue_reference<T>::type;

	template<class T>
	using add_rvalue_reference_t = typename std::add_rvalue_reference<T>::type;

	template<class T>
	using remove_pointer_t = typename std::remove_pointer<T>::type;

	template<class T>
	using add_pointer_t = typename std::add_pointer<T>::type;

	template<class T>
	using make_signed_t = typename std::make_signed<T>::type;

	template<class T>
	using make_unsigned_t = typename std::make_unsigned<T>::type;
#endif

/* C++ 17 helpers */
#if __cplusplus >= 201703L
	template<class T, class U>
	using is_same_v = typename std::is_same_v<T, U>;

	template<class T>
	using is_null_pointer_v = typename std::is_null_pointer_v<T>;

	template<class T>
	using is_void_v = typename std::is_void_v<T>;

	template<class T>
	using is_integral_v = typename std::is_integral_v<T>;

	template<class T>
	using is_floating_point_v = typename std::is_floating_point_v<T>;

	template<class T>
	using is_array_v = typename std::is_array_v<T>;

	template<class T>
	using is_enum_v = typename std::is_enum_v<T>;

	template<class T>
	using is_union_v = typename std::is_union_v<T>;

	template<class T>
	using is_class_v = typename std::is_class_v<T>;

	template<class T>
	using is_function_v = typename std::is_function_v<T>;

	template<class T>
	using is_pointer_v = typename std::is_pointer_v<T>;

	template<class T>
	using is_lvalue_reference_v = typename std::is_lvalue_reference_v<T>;

	template<class T>
	using is_rvalue_reference_v = typename std::is_rvalue_reference_v<T>;

	template<class T>
	using is_member_object_pointer_v = typename std::is_member_object_pointer_v<T>;

	template<class T>
	using is_member_function_pointer_v = typename std::is_member_function_pointer_v<T>;

	template<class T>
	using is_fundamental_v = typename std::is_fundamental_v<T>;

	template<class T>
	using is_arithmetic_v = typename std::is_arithmetic_v<T>;

	template<class T>
	using is_object_v = typename std::is_object_v<T>;

	template<class T>
	using is_compound_v = typename std::is_compound_v<T>;

	template<class T>
	using is_reference_v = typename std::is_reference_v<T>;

	template<class T>
	using is_member_pointer_v = typename std::is_member_pointer_v<T>;

	template<class T>
	using is_scalar_v = typename std::is_scalar_v<T>;

	template<class T, class U>
	using is_base_of_v = typename std::is_base_of_v<T, U>;

	template<class T, class U>
	using is_convertible_v = typename std::is_convertible_v<T, U>;

	template<class T>
	using has_virtual_destructor_v = typename std::has_virtual_destructor_v<T>;

	template<class T>
	using is_destructible_v = typename std::is_destructible_v<T>;

	template<class T>
	using is_trivially_destructible_v = typename std::is_trivially_destructible_v<T>;

	template<class T>
	using is_nothrow_destructible_v = typename std::is_nothrow_destructible_v<T>;

	template<class T>
	using is_move_assignable_v = typename std::is_move_assignable<T>;

	template<class T>
	using is_trivially_move_assignable_v = typename std::is_trivially_move_assignable_v<T>;

	template<class T>
	using is_nothrow_move_assignable_v = typename std::is_nothrow_move_assignable_v<T>;

	template<class T>
	using is_copy_assignable_v = typename std::is_copy_assignable_v<T>;

	template<class T>
	using is_trivially_copy_assignable_v = typename std::is_trivially_copy_assignable_v<T>;

	template<class T>
	using is_nothrow_copy_assignable_v = typename std::is_nothrow_copy_assignable_v<T>;

	template<class T, class U>
	using is_assignable_v = typename std::is_assignable_v<T, U>;

	template<class T, class U>
	using is_trivially_assignable_v = typename std::is_trivially_assignable_c<T, U>;

	template<class T, class U>
	using is_nothrow_assignable_v = typename std::is_nothrow_assignable_v<T, U>;

	template<class T>
	using is_move_constructible_v = typename std::is_move_constructible_v<T>;

	template<class T>
	using is_trivially_move_constructible_v = typename std::is_trivially_move_constructible_v<T>;

	template<class T>
	using is_nothrow_move_constructible_v = typename std::is_nothrow_move_constructible_v<T>;

	template<class T>
	using is_copy_constructible_v = typename std::is_copy_constructible_v<T>;

	template<class T>
	using is_trivially_copy_constructible_v = typename std::is_trivially_copy_constructible_v<T>;

	template<class T>
	using is_nothrow_copy_constructible_v = typename std::is_nothrow_copy_constructible_v<T>;

	template<class T>
	using is_default_constructible_v = typename std::is_default_constructible_v<T>;

	template<class T>
	using is_trivially_default_constructible_v = typename std::is_trivially_default_constructible_v<T>;

	template<class T>
	using is_nothrow_default_constructible_v = typename std::is_nothrow_default_constructible_v<T>;

	template<class T, class... Args>
	using is_constructible_v = typename std::is_constructible_v<T, Args...>;

	template<class T, class... Args>
	using is_trivially_constructible_v = typename std::is_trivially_constructible_v<T, Args...>;

	template<class T, class... Args>
	using is_nothrow_constructible_v = typename std::is_nothrow_constructible_v<T, Args...>;

	template<class T>
	using is_unsigned_v = typename std::is_unsigned_v<T>;

	template<class T>
	using is_signed_v = typename std::is_signed_v<T>;

	template<class T>
	using is_abstract_v = typename std::is_abstract_v<T>;

	template<class T>
	using is_polymorphic_v = typename std::is_polymorphic_v<T>;

	template<class T>
	using is_empty_v = typename std::is_empty_v<T>;

	template<class T>
	using is_pod_v = typename std::is_pod_v<T>;

	template<class T>
	using is_standard_layout_v = typename std::is_standard_layout_v<T>;

	template<class T>
	using is_trivially_copyable_v = typename std::is_trivially_copyable_v<T>;

	template<class T>
	using is_trivial_v = typename std::is_trivial_v<T>;

	template<class T>
	using is_volatile_v = typename std::is_volatile_v<T>;

	template<class T>
	using is_const_v = typename std::is_const_v<T>;

	template<class T>
	using is_literal_type_v = typename std::is_literal_type_v<T>;

	template<class T>
	using is_final_v = typename std::is_final_v<T>;
#else
	/* Due to the fact these use variable templates, they are only supported in C++ 14 */
#if __cplusplus >= 201402L
	template<class T, class U>
	constexpr bool is_same_v = std::is_same<T, U>::value;

	template<class T>
	constexpr bool is_null_pointer_v = std::is_null_pointer<T>::value;

	template<class T>
	constexpr bool is_void_v = std::is_void<T>::value;

	template<class T>
	constexpr bool is_integral_v = std::is_integral<T>::value;

	template<class T>
	constexpr bool is_floating_point_v = std::is_floating_point<T>::value;

	template<class T>
	constexpr bool is_array_v = std::is_array<T>::value;

	template<class T>
	constexpr bool is_enum_v = std::is_enum<T>::value;

	template<class T>
	constexpr bool is_union_v = std::is_union<T>::value;

	template<class T>
	constexpr bool is_class_v = std::is_class<T>::value;

	template<class T>
	constexpr bool is_function_v = std::is_function<T>::value;

	template<class T>
	constexpr bool is_pointer_v = std::is_pointer<T>::value;

	template<class T>
	constexpr bool is_lvalue_reference_v = std::is_lvalue_reference<T>::value;

	template<class T>
	constexpr bool is_rvalue_reference_v = std::is_rvalue_reference<T>::value;

	template<class T>
	constexpr bool is_member_object_pointer_v = std::is_member_object_pointer<T>::value;

	template<class T>
	constexpr bool is_member_function_pointer_v = std::is_member_function_pointer<T>::value;

	template<class T>
	constexpr bool is_fundamental_v = std::is_fundamental<T>::value;

	template<class T>
	constexpr bool is_arithmetic_v = std::is_arithmetic<T>::value;

	template<class T>
	constexpr bool is_object_v = std::is_object<T>::value;

	template<class T>
	constexpr bool is_compound_v = std::is_compound<T>::value;

	template<class T>
	constexpr bool is_reference_v = std::is_reference<T>::value;

	template<class T>
	constexpr bool is_member_pointer_v = std::is_member_pointer<T>::value;

	template<class T>
	constexpr bool is_scalar_v = std::is_scalar<T>::value;

	template<class T, class U>
	constexpr bool is_base_of_v = std::is_base_of<T, U>::value;

	template<class T, class U>
	constexpr bool is_convertible_v = std::is_convertible<T, U>::value;

	template<class T>
	constexpr bool has_virtual_destructor_v = std::has_virtual_destructor<T>::value;

	template<class T>
	constexpr bool is_destructible_v = std::is_destructible<T>::value;

	template<class T>
	constexpr bool is_trivially_destructible_v = std::is_trivially_destructible<T>::value;

	template<class T>
	constexpr bool is_nothrow_destructible_v = std::is_nothrow_destructible<T>::value;

	template<class T>
	constexpr bool is_move_assignable_v = std::is_move_assignable<T>::value;

	template<class T>
	constexpr bool is_trivially_move_assignable_v = std::is_trivially_move_assignable<T>::value;

	template<class T>
	constexpr bool is_nothrow_move_assignable_v = std::is_nothrow_move_assignable<T>::value;

	template<class T>
	constexpr bool is_copy_assignable_v = std::is_copy_assignable<T>::value;

	template<class T>
	constexpr bool is_trivially_copy_assignable_v = std::is_trivially_copy_assignable<T>::value;

	template<class T>
	constexpr bool is_nothrow_copy_assignable_v = std::is_nothrow_copy_assignable<T>::value;

	template<class T, class U>
	constexpr bool is_assignable_v = std::is_assignable<T, U>::value;

	template<class T, class U>
	constexpr bool is_trivially_assignable_v = std::is_trivially_assignable<T, U>::value;

	template<class T, class U>
	constexpr bool is_nothrow_assignable_v = std::is_nothrow_assignable<T, U>::value;

	template<class T>
	constexpr bool is_move_constructible_v = std::is_move_constructible<T>::value;

	template<class T>
	constexpr bool is_trivially_move_constructible_v = std::is_trivially_move_constructible<T>::value;

	template<class T>
	constexpr bool is_nothrow_move_constructible_v = std::is_nothrow_move_constructible<T>::value;

	template<class T>
	constexpr bool is_copy_constructible_v = std::is_copy_constructible<T>::value;

	template<class T>
	constexpr bool is_trivially_copy_constructible_v = std::is_trivially_copy_constructible<T>::value;

	template<class T>
	constexpr bool is_nothrow_copy_constructible_v = std::is_nothrow_copy_constructible<T>::value;

	template<class T>
	constexpr bool is_default_constructible_v = std::is_default_constructible<T>::value;

	template<class T>
	constexpr bool is_trivially_default_constructible_v = std::is_trivially_default_constructible<T>::value;

	template<class T>
	constexpr bool is_nothrow_default_constructible_v = std::is_nothrow_default_constructible<T>::value;

	template<class T, class... Args>
	constexpr bool is_constructible_v = std::is_constructible<T, Args...>::value;

	template<class T, class... Args>
	constexpr bool is_trivially_constructible_v = std::is_trivially_constructible<T, Args...>::value;

	template<class T, class... Args>
	constexpr bool is_nothrow_constructible_v = std::is_nothrow_constructible<T, Args...>::value;

	template<class T>
	constexpr bool is_unsigned_v = std::is_unsigned<T>::value;

	template<class T>
	constexpr bool is_signed_v = std::is_signed<T>::value;

	template<class T>
	constexpr bool is_abstract_v = std::is_abstract<T>::value;

	template<class T>
	constexpr bool is_polymorphic_v = std::is_polymorphic<T>::value;

	template<class T>
	constexpr bool is_empty_v = std::is_empty<T>::value;

	template<class T>
	constexpr bool is_pod_v = std::is_pod<T>::value;

	template<class T>
	constexpr bool is_standard_layout_v = std::is_standard_layout<T>::value;

	template<class T>
	constexpr bool is_trivially_copyable_v = std::is_trivially_copyable<T>::value;

	template<class T>
	constexpr bool is_trivial_v = std::is_trivial<T>::value;

	template<class T>
	constexpr bool is_volatile_v = std::is_volatile<T>::value;

	template<class T>
	constexpr bool is_const_v = std::is_const<T>::value;

	template<class T>
	constexpr bool is_literal_type_v = std::is_literal_type<T>::value;

#elif defined(SUBSTRATE_CXX11_COMPAT)
	#include <substrate/internal/cxx11_compat>
#endif
#endif

	/* Shift nibble */
	template<typename T>
	typename std::enable_if<std::is_integral<T>::value ,T>::type
	constexpr inline shift_nibble(const T v, const std::size_t shift) noexcept
	{
		return (((v | 0x00U) << ((shift & ((sizeof(T) << 1) + ~0x00U)) << 2)) | ((v | 0x00U) >> ((sizeof(T) << 3) + 0x01U + ~((shift & ((sizeof(T) << 1) + ~0x00U)) << 2))));
	}

	/* typename decoding */
	template<typename T>
	std::string decode_typename()
	{
		using _type_ref = typename substrate::remove_reference_t<T>;
#ifndef _MSC_VER
		auto demangler = abi::__cxa_demangle(typeid(_type_ref).name(), nullptr, nullptr, nullptr);
#else
		auto demangler = nullptr;
#endif
		std::unique_ptr<char, void(*)(void*)> _demangle{demangler, std::free};
		std::string _type_name{_demangle ? _demangle.get() : typeid(_type_ref).name()};

		if (std::is_const<_type_ref>::value)
			_type_name += " const";
		if (std::is_volatile<_type_ref>::value)
			_type_name += " volatile";
		if (std::is_lvalue_reference<T>::value)
			_type_name += "&";
		if (std::is_rvalue_reference<T>::value)
			_type_name += "&&";

		return _type_name;
	}

	template<typename T> struct makeUnique_t { using uniqueType = std::unique_ptr<T>; };
	template<typename T> struct makeUnique_t<T []> { using arrayType = std::unique_ptr<T []>; };
	template<typename T, size_t N> struct makeUnique_t<T [N]> { struct invalidType { }; };

	template<typename T, typename... args_t> inline typename makeUnique_t<T>::uniqueType
		make_unique(args_t &&...args)
	{
		using type_t = remove_const_t<T>;
		return std::unique_ptr<T>{new type_t{std::forward<args_t>(args)...}};
	}

	template<typename T> inline typename makeUnique_t<T>::arrayType
		make_unique(const size_t num)
	{
		using type_t = remove_const_t<remove_extent_t<T>>;
		return std::unique_ptr<T>{new type_t[num]{{}}};
	}

	template<typename T, typename... args_t> inline typename makeUnique_t<T>::invalidType
		make_unique(args_t &&...) noexcept = delete;

	template<typename T, typename... Args> inline typename makeUnique_t<T>::uniqueType
		make_unique_nothrow(Args &&...args) noexcept(noexcept(T{std::forward<Args>(args)...}))
	{
		using type_t = remove_const_t<T>;
		return std::unique_ptr<T>{new (std::nothrow) type_t{std::forward<Args>(args)...}};
	}

	template<typename T> inline typename makeUnique_t<T>::arrayType
		make_unique_nothrow(const size_t num) noexcept
	{
		using type_t = remove_const_t<remove_extent_t<T>>;
		return std::unique_ptr<T>{new (std::nothrow) type_t[num]{{}}};
	}

	template<typename T, typename... Args> inline typename makeUnique_t<T>::invalidType
		make_unique_nothrow(Args &&...) noexcept = delete;

	/* endian swapping facilities */
	inline constexpr uint16_t bswap16(const uint16_t x) noexcept {
		return (((x & 0x00FFU) << 8U) |
		        ((x & 0xFF00U) >> 8U));
	}

	inline constexpr uint32_t bswap32(const uint32_t x) noexcept {
		return (((x & 0x000000FFU) << 24U) |
		        ((x & 0x0000FF00U) << 8U ) |
		        ((x & 0x00FF0000U) >> 8U ) |
		        ((x & 0xFF000000U) >> 24U));
	}

	inline constexpr uint64_t bswap64(const uint64_t x) noexcept {
		return (((x & 0x00000000000000FFU) << 56U) |
		        ((x & 0x000000000000FF00U) << 40U) |
		        ((x & 0x0000000000FF0000U) << 24U) |
		        ((x & 0x00000000FF000000U) << 8U ) |
		        ((x & 0x000000FF00000000U) >> 8U ) |
		        ((x & 0x0000FF0000000000U) >> 24U) |
		        ((x & 0x00FF000000000000U) >> 40U) |
		        ((x & 0xFF00000000000000U) >> 56U));
	}
}

#endif /* SUBSTRATE_UTILITIES */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
