// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_INTERNAL_FD_COMPAT
#define SUBSTRATE_INTERNAL_FD_COMPAT

#include <cstdint>
#include <cstddef>
#ifndef _MSC_VER
#	include <unistd.h>
#else
#	include <io.h>
#endif
#include <sys/types.h>
#include <sys/stat.h>
#include <substrate/internal/types>

#if defined(_MSC_VER) || defined(__MINGW64__) || defined(__MINGW32__)
#	if !defined(_WINDOWS)
#		define _WINDOWS 1
#	endif
#endif

#if defined(_WIN32)
#	define O_NOCTTY _O_BINARY
#	if defined(__MINGW32__) || defined(__MINGW64__)
#		undef fstat // macro conflicts with fstat definition below
#	endif
#endif

namespace substrate
{
#ifndef _WIN32
	using mode_t = ::mode_t;
	using off_t = ::off_t;
#else
	using mode_t = int32_t;
	using off_t = int64_t;
#endif

	namespace internal
	{
#ifndef _WIN32
		using stat_t = struct stat;
		using ::fstat;

		inline ssize_t fdread(const int32_t fd, void *const bufferPtr, const size_t bufferLen) noexcept
			{ return read(fd, bufferPtr, bufferLen); }
		inline ssize_t fdwrite(const int32_t fd, const void *const bufferPtr, const size_t bufferLen) noexcept
			{ return write(fd, bufferPtr, bufferLen); }
		inline off_t fdseek(const int32_t fd, const off_t offset, const int32_t whence) noexcept
			{ return lseek(fd, offset, whence); }
		inline off_t fdtell(const int32_t fd) noexcept
			{ return lseek(fd, 0, SEEK_CUR); }
		inline int32_t fdtruncate(const int32_t fd, const off_t size) noexcept
			{ return ftruncate(fd, size); }
#else
#if defined(__MINGW32__) || defined(__MINGW64__)
		using stat_t = struct _stat64;
#else
		using stat_t = struct ::_stat64;
#endif

		inline ssize_t fdread(const int32_t fd, void *const bufferPtr, const size_t bufferLen) noexcept
			{ return read(fd, bufferPtr, uint32_t(bufferLen)); }
		inline ssize_t fdwrite(const int32_t fd, const void *const bufferPtr, const size_t bufferLen) noexcept
			{ return write(fd, bufferPtr, uint32_t(bufferLen)); }
		inline int fstat(int32_t fd, stat_t *stat) noexcept { return _fstat64(fd, stat); }
		inline off_t fdseek(const int32_t fd, const off_t offset, const int32_t whence) noexcept
			{ return _lseeki64(fd, offset, whence); }
		inline off_t fdtell(const int32_t fd) noexcept
			{ return _telli64(fd); }
		inline int32_t fdtruncate(const int32_t fd, const off_t size) noexcept
			{ return _chsize_s(fd, size); }
#endif
	} // namespace substrate::internal
} // namespace substrate

#endif /* SUBSTRATE_INTERNAL_FD_COMPAT */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
