// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_INTERNAL_DEFS
#define SUBSTRATE_INTERNAL_DEFS

#if defined(_MSC_VER) || defined(__MINGW64__) || defined(__MINGW32__)
#	if !defined(_WIN32)
#		define _WIN32 1
#	endif
#endif

#if !defined(__has_cpp_attribute)
#	define __has_cpp_attribute(x) 0
#endif

// GCC 9 in C++03 mode reports __has_cpp_attribute as true.
// See
// https://github.com/boostorg/config/commit/8d58766c7b097ecdf99d414cc08feec313741332
#if __has_cpp_attribute(no_unique_address) && !(defined(__GNUC__) && (__cplusplus < 201100))
#	define SUBSTRATE_NO_UNIQUE_ADDRESS(x) [[no_unique_address]] x
#else
#	define SUBSTRATE_NO_UNIQUE_ADDRESS(x) x
#endif

#if __has_cpp_attribute(maybe_unused) || __cplusplus >= 201703L
#	define SUBSTRATE_NOWARN_UNUSED(x) [[maybe_unused]] x
#elif defined(__GNUC__)
#	define SUBSTRATE_NOWARN_UNUSED(x) x __attribute__((unused))
#else
#	define SUBSTRATE_NOWARN_UNUSED(x) x
#endif

#if __has_cpp_attribute(nodiscard) || __cplusplus >= 201402L
#	define SUBSTRATE_NO_DISCARD(...) [[nodiscard]] __VA_ARGS__
#elif defined(__GNUC__)
#	define SUBSTRATE_NO_DISCARD(...) __VA_ARGS__ __attribute__((warn_unused_result))
#else
#	define SUBSTRATE_NO_DISCARD(...) __VA_ARGS__
#endif

#if __has_cpp_attribute(fallthrough) || __cplusplus >= 201402L
#	define SUBSTRATE_FALLTHROUGH() [[fallthrough]]
#elif defined(__GNUC__)
#	define SUBSTRATE_FALLTHROUGH() __attribute__((fallthrough))
#else
#	define SUBSTRATE_FALLTHROUGH() ((void)0)
#endif

#if __cplusplus >= 201103L
#	define ALIGN(X) alignas(x)
#elif defined(__GNUC__)
#	define SUBSTRATE_ALIGN(X) __attribute__ ((aligned (X)))
#else
#	define SUBSTRATE_ALIGN(X)
#endif

#ifdef _WIN32
#	ifdef SUBSTRATE_BUILD_INTERNAL
#		define SUBSTRATE_CLS_API __declspec(dllexport)
#	else
#		define SUBSTRATE_CLS_API __declspec(dllimport)
#	endif
#	define SUBSTRATE_API extern SUBSTRATE_CLS_API
#	define SUBSTRATE_CLS_MAYBE_API
#else
#	define SUBSTRATE_CLS_API __attribute__ ((visibility("default")))
#	define SUBSTRATE_CLS_MAYBE_API SUBSTRATE_CLS_API
#	define SUBSTRATE_API extern SUBSTRATE_CLS_API
#endif

#if __cplusplus >= 201402L
#	define SUBSTRATE_DEPRECATE_R(reson) [[deprecated(reson)]]
#	define SUBSTRATE_DEPRECATE() [[deprecated]]
#else
#	ifdef _WIN32
#		define SUBSTRATE_DEPRECATE_R(reson) __declspec(deprecated(reson))
#		define SUBSTRATE_DEPRECATE() __declspec(deprecated)
#	else
#		define SUBSTRATE_DEPRECATE_R(reson) [[gnu::deprecated(reason)]]
#		define SUBSTRATE_DEPRECATE() __attribute__ ((deprecated))
#	endif
#endif

#if __cplusplus >= 201402L
#	define SUBSTRATE_CXX14_CONSTEXPR constexpr
#	if defined (_WIN32)
#		define SUBSTRATE_CXX14_MAYBE_CONSTEXPR
#	else
#		define SUBSTRATE_CXX14_MAYBE_CONSTEXPR constexpr
#	endif
#else
#	define SUBSTRATE_CXX14_CONSTEXPR
#	define SUBSTRATE_CXX14_MAYBE_CONSTEXPR
#endif

#if __cplusplus >= 201703L
#	define SUBSTRATE_CXX17_CONSTEXPR constexpr
#	define SUBSTRATE_CXX17_INLINE inline
#else
#	define SUBSTRATE_CXX17_CONSTEXPR
#	define SUBSTRATE_CXX17_INLINE
#endif

#ifdef _WIN32
namespace substrate
{
#ifdef _WIN64
	using ssize_t = __int64;
#else
	using ssize_t = int;
#endif
}
#endif

#endif /* SUBSTRATE_INTERNAL_DEFS */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
