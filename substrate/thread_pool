// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_THREAD_POOL
#define SUBSTRATE_THREAD_POOL

#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <cstdint>
#include <mutex>
#include <thread>
#include <tuple>

#include "affinity"
#include "threaded_queue"
#include "utility"

namespace substrate
{
	template<typename workFunc_t> struct threadPool_t;

	template<typename result_t, typename... args_t> struct threadPool_t<result_t(args_t...)> final
	{
	private:
		using workFunc_t = result_t (*)(args_t...);
		std::atomic<std::size_t> waitingThreads{};
		std::mutex workMutex{};
		std::condition_variable haveWork{};
		threadedQueue_t<std::tuple<args_t...>> work{};
		std::atomic<bool> finished{false};
		threadedQueue_t<result_t> results{};
		std::vector<std::thread> threads{};
		affinity_t affinity;
		workFunc_t workerFunction;

		std::pair<bool, std::tuple<args_t...>> waitWork() noexcept
		{
			std::unique_lock<std::mutex> lock{workMutex};
			++waitingThreads;
			// wait, but protect ourselves from accidental wake-ups..
			haveWork.wait(lock, [this]() noexcept -> bool { return finished || !work.empty(); });
			--waitingThreads;
			if (!work.empty())
				return {true, work.pop()};
			return {false, {}};
		}

		template<std::size_t... indicies>
			SUBSTRATE_NO_DISCARD(result_t invoke(std::tuple<args_t...> &&args,
			internal::indexSequence_t<indicies...>))
			{ return workerFunction(std::get<indicies>(std::move(args))...); }

		void workerThread(const std::size_t processor) noexcept
		{
			affinity.pinThreadTo(processor);
			while (!(finished && work.empty()))
			{
				auto task = waitWork();
				// This checks for both if we don't have something to do and if we're supposed to be finishing up
				if (finished && !task.first)
					break;
				auto result = invoke(std::move(task.second), internal::indexSequence_t<sizeof...(args_t)>());
				results.push(std::move(result));
			}
		}

		result_t clearResultQueue() noexcept
		{
			result_t result{};
			while (!results.empty())
			{
				const auto thisResult = results.pop();
				if (!result)
					result = thisResult;
			}
			return result;
		}

	public:
		threadPool_t(const workFunc_t function) : workerFunction{function}
		{
			for (const auto processor : affinity.indexSequence())
				threads.emplace_back(std::thread{[this](const std::size_t processor) -> void
					{ workerThread(processor); }, processor});
			while (!ready())
				std::this_thread::sleep_for(std::chrono::microseconds(1));
		}
		threadPool_t(const threadPool_t &) = delete;
		threadPool_t(threadPool_t &&) = delete;
		~threadPool_t() noexcept { [[maybe_unused]] const auto result = finish(); }
		threadPool_t &operator =(const threadPool_t &) = delete;
		threadPool_t &operator =(threadPool_t &&) = delete;

		SUBSTRATE_NO_DISCARD(size_t numProcessors() const noexcept) { return affinity.numProcessors(); }
		SUBSTRATE_NO_DISCARD(bool valid() const noexcept) { return !threads.empty(); }
		SUBSTRATE_NO_DISCARD(bool ready() const noexcept) { return waitingThreads == affinity.numProcessors(); }

		SUBSTRATE_NO_DISCARD(result_t queue(args_t ...args) noexcept)
		{
			work.emplace(std::forward<args_t>(args)...);
			haveWork.notify_one();
			return clearResultQueue();
		}

		SUBSTRATE_NO_DISCARD(result_t finish() noexcept)
		{
			if (threads.empty())
				return {};
			finished = true;
			haveWork.notify_all();
			for (auto &thread : threads)
				thread.join();
			threads.clear();
			return clearResultQueue();
		}
	};

#if __cplusplus >= 201703L
	template<typename result_t, typename... args_t>
		threadPool_t(result_t (*)(args_t...)) -> threadPool_t<result_t(args_t...)>;
#endif
} // namespace substrate

#endif /* SUBSTRATE_THREAD_POOL */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
