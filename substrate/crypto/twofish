// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_CRYPTO_TWOFISH
#define SUBSTRATE_CRYPTO_TWOFISH

#include <type_traits>
#include <limits>
#include <cstdint>
#include <array>
#include <cstdlib>
#include <cstring>

#include <substrate/internal/defs>
#include <substrate/utility>
#include <substrate/bits>
#include <substrate/buffer_utils>
#include <substrate/promotion_helpers>

namespace substrate
{
	namespace crypto {
		namespace {
			/* Twofish Maximum Distance Seperable (MDS) matrix */
			constexpr std::array<std::array<uint8_t, 4>, 4> mds_matrix{{
				{{ 0x01U, 0xEFU, 0x5BU, 0x5BU }},
				{{ 0x5BU, 0xEFU, 0xEFU, 0x01U }},
				{{ 0xEFU, 0x5BU, 0x01U, 0xEFU }},
				{{ 0xEFU, 0x01U, 0xEFU, 0x5BU }},
			}};

			/* Twofish S-Box seed tables*/
			constexpr std::array<std::array<uint8_t, 256>, 2> box_seeds{{
				{{
					0xA9U, 0x67U, 0xB3U, 0xE8U, 0x04U, 0xFDU, 0xA3U, 0x76U,
					0x9AU, 0x92U, 0x80U, 0x78U, 0xE4U, 0xDDU, 0xD1U, 0x38U,
					0x0DU, 0xC6U, 0x35U, 0x98U, 0x18U, 0xF7U, 0xECU, 0x6CU,
					0x43U, 0x75U, 0x37U, 0x26U, 0xFAU, 0x13U, 0x94U, 0x48U,
					0xF2U, 0xD0U, 0x8BU, 0x30U, 0x84U, 0x54U, 0xDFU, 0x23U,
					0x19U, 0x5BU, 0x3DU, 0x59U, 0xF3U, 0xAEU, 0xA2U, 0x82U,
					0x63U, 0x01U, 0x83U, 0x2EU, 0xD9U, 0x51U, 0x9BU, 0x7CU,
					0xA6U, 0xEBU, 0xA5U, 0xBEU, 0x16U, 0x0CU, 0xE3U, 0x61U,
					0xC0U, 0x8CU, 0x3AU, 0xF5U, 0x73U, 0x2CU, 0x25U, 0x0BU,
					0xBBU, 0x4EU, 0x89U, 0x6BU, 0x53U, 0x6AU, 0xB4U, 0xF1U,
					0xE1U, 0xE6U, 0xBDU, 0x45U, 0xE2U, 0xF4U, 0xB6U, 0x66U,
					0xCCU, 0x95U, 0x03U, 0x56U, 0xD4U, 0x1CU, 0x1EU, 0xD7U,
					0xFBU, 0xC3U, 0x8EU, 0xB5U, 0xE9U, 0xCFU, 0xBFU, 0xBAU,
					0xEAU, 0x77U, 0x39U, 0xAFU, 0x33U, 0xC9U, 0x62U, 0x71U,
					0x81U, 0x79U, 0x09U, 0xADU, 0x24U, 0xCDU, 0xF9U, 0xD8U,
					0xE5U, 0xC5U, 0xB9U, 0x4DU, 0x44U, 0x08U, 0x86U, 0xE7U,
					0xA1U, 0x1DU, 0xAAU, 0xEDU, 0x06U, 0x70U, 0xB2U, 0xD2U,
					0x41U, 0x7BU, 0xA0U, 0x11U, 0x31U, 0xC2U, 0x27U, 0x90U,
					0x20U, 0xF6U, 0x60U, 0xFFU, 0x96U, 0x5CU, 0xB1U, 0xABU,
					0x9EU, 0x9CU, 0x52U, 0x1BU, 0x5FU, 0x93U, 0x0AU, 0xEFU,
					0x91U, 0x85U, 0x49U, 0xEEU, 0x2DU, 0x4FU, 0x8FU, 0x3BU,
					0x47U, 0x87U, 0x6DU, 0x46U, 0xD6U, 0x3EU, 0x69U, 0x64U,
					0x2AU, 0xCEU, 0xCBU, 0x2FU, 0xFCU, 0x97U, 0x05U, 0x7AU,
					0xACU, 0x7FU, 0xD5U, 0x1AU, 0x4BU, 0x0EU, 0xA7U, 0x5AU,
					0x28U, 0x14U, 0x3FU, 0x29U, 0x88U, 0x3CU, 0x4CU, 0x02U,
					0xB8U, 0xDAU, 0xB0U, 0x17U, 0x55U, 0x1FU, 0x8AU, 0x7DU,
					0x57U, 0xC7U, 0x8DU, 0x74U, 0xB7U, 0xC4U, 0x9FU, 0x72U,
					0x7EU, 0x15U, 0x22U, 0x12U, 0x58U, 0x07U, 0x99U, 0x34U,
					0x6EU, 0x50U, 0xDEU, 0x68U, 0x65U, 0xBCU, 0xDBU, 0xF8U,
					0xC8U, 0xA8U, 0x2BU, 0x40U, 0xDCU, 0xFEU, 0x32U, 0xA4U,
					0xCAU, 0x10U, 0x21U, 0xF0U, 0xD3U, 0x5DU, 0x0FU, 0x00U,
					0x6FU, 0x9DU, 0x36U, 0x42U, 0x4AU, 0x5EU, 0xC1U, 0xE0U
				}},
				{{
					0x75U, 0xF3U, 0xC6U, 0xF4U, 0xDBU, 0x7BU, 0xFBU, 0xC8U,
					0x4AU, 0xD3U, 0xE6U, 0x6BU, 0x45U, 0x7DU, 0xE8U, 0x4BU,
					0xD6U, 0x32U, 0xD8U, 0xFDU, 0x37U, 0x71U, 0xF1U, 0xE1U,
					0x30U, 0x0FU, 0xF8U, 0x1BU, 0x87U, 0xFAU, 0x06U, 0x3FU,
					0x5EU, 0xBAU, 0xAEU, 0x5BU, 0x8AU, 0x00U, 0xBCU, 0x9DU,
					0x6DU, 0xC1U, 0xB1U, 0x0EU, 0x80U, 0x5DU, 0xD2U, 0xD5U,
					0xA0U, 0x84U, 0x07U, 0x14U, 0xB5U, 0x90U, 0x2CU, 0xA3U,
					0xB2U, 0x73U, 0x4CU, 0x54U, 0x92U, 0x74U, 0x36U, 0x51U,
					0x38U, 0xB0U, 0xBDU, 0x5AU, 0xFCU, 0x60U, 0x62U, 0x96U,
					0x6CU, 0x42U, 0xF7U, 0x10U, 0x7CU, 0x28U, 0x27U, 0x8CU,
					0x13U, 0x95U, 0x9CU, 0xC7U, 0x24U, 0x46U, 0x3BU, 0x70U,
					0xCAU, 0xE3U, 0x85U, 0xCBU, 0x11U, 0xD0U, 0x93U, 0xB8U,
					0xA6U, 0x83U, 0x20U, 0xFFU, 0x9FU, 0x77U, 0xC3U, 0xCCU,
					0x03U, 0x6FU, 0x08U, 0xBFU, 0x40U, 0xE7U, 0x2BU, 0xE2U,
					0x79U, 0x0CU, 0xAAU, 0x82U, 0x41U, 0x3AU, 0xEAU, 0xB9U,
					0xE4U, 0x9AU, 0xA4U, 0x97U, 0x7EU, 0xDAU, 0x7AU, 0x17U,
					0x66U, 0x94U, 0xA1U, 0x1DU, 0x3DU, 0xF0U, 0xDEU, 0xB3U,
					0x0BU, 0x72U, 0xA7U, 0x1CU, 0xEFU, 0xD1U, 0x53U, 0x3EU,
					0x8FU, 0x33U, 0x26U, 0x5FU, 0xECU, 0x76U, 0x2AU, 0x49U,
					0x81U, 0x88U, 0xEEU, 0x21U, 0xC4U, 0x1AU, 0xEBU, 0xD9U,
					0xC5U, 0x39U, 0x99U, 0xCDU, 0xADU, 0x31U, 0x8BU, 0x01U,
					0x18U, 0x23U, 0xDDU, 0x1FU, 0x4EU, 0x2DU, 0xF9U, 0x48U,
					0x4FU, 0xF2U, 0x65U, 0x8EU, 0x78U, 0x5CU, 0x58U, 0x19U,
					0x8DU, 0xE5U, 0x98U, 0x57U, 0x67U, 0x7FU, 0x05U, 0x64U,
					0xAFU, 0x63U, 0xB6U, 0xFEU, 0xF5U, 0xB7U, 0x3CU, 0xA5U,
					0xCEU, 0xE9U, 0x68U, 0x44U, 0xE0U, 0x4DU, 0x43U, 0x69U,
					0x29U, 0x2EU, 0xACU, 0x15U, 0x59U, 0xA8U, 0x0AU, 0x9EU,
					0x6EU, 0x47U, 0xDFU, 0x34U, 0x35U, 0x6AU, 0xCFU, 0xDCU,
					0x22U, 0xC9U, 0xC0U, 0x9BU, 0x89U, 0xD4U, 0xEDU, 0xABU,
					0x12U, 0xA2U, 0x0DU, 0x52U, 0xBBU, 0x02U, 0x2FU, 0xA9U,
					0xD7U, 0x61U, 0x1EU, 0xB4U, 0x50U, 0x04U, 0xF6U, 0xC2U,
					0x16U, 0x25U, 0x86U, 0x56U, 0x55U, 0x09U, 0xBEU, 0x91U
				}}
			}};

			SUBSTRATE_NO_DISCARD(inline uint8_t mds_op(const uint8_t e, const uint8_t v) noexcept) {
				uint8_t ret{0U};
				switch(e) {
					case 0xEFU: {
						ret ^= uint8_t((v >> 1U) ^ ((0x169U * (v & 1U)) >> 1U));
						SUBSTRATE_FALLTHROUGH();
					} case 0x5BU: {
						ret ^= uint8_t((v >> 2U) ^ ((0x169U * (v & 1U)) >> 2U) ^ ((0x169U * (v & 2U)) >> 2U));
						SUBSTRATE_FALLTHROUGH();
					} case 0x01U: {
						return uint8_t(v ^ ret);
						SUBSTRATE_FALLTHROUGH();
					} default: {
						std::abort();
					}
				}
			}

			SUBSTRATE_NO_DISCARD(inline uint8_t mds_mult_row(const uint8_t i, const uint8_t a, const uint8_t b, const uint8_t c, const uint8_t d) noexcept) {
				return uint8_t(
					mds_op(mds_matrix[i][0], a) ^ mds_op(mds_matrix[i][1], b) ^
					mds_op(mds_matrix[i][2], c) ^ mds_op(mds_matrix[i][3], d)
				);
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t mds_mult(const uint8_t a, const uint8_t b, const uint8_t c, const uint8_t d) noexcept) {
				return uint32_t(
					uint32_t(mds_mult_row(0, a, b, c, d)       ) ^ uint32_t(mds_mult_row(1, a, b, c, d) << 8U) ^
					uint32_t(mds_mult_row(2, a, b, c, d) << 16U) ^ uint32_t(mds_mult_row(3, a, b, c, d) << 24)
				);
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t rs_mod(const uint32_t k) noexcept) {
				using arith_uint_t = promoted_type_t<uint8_t>;
				constexpr uint32_t mod{UINT32_C(0x0000014D)};
				const uint8_t x{uint8_t(k >> 24U)};
				const uint32_t y{uint32_t(arith_uint_t(x << 1U) ^ ((arith_uint_t(x & 0x80U) >> 7U) * mod))};
				const uint32_t z{uint32_t(y ^ (x >> 1U) ^ ((x & 1U) * (mod >> 1U)))};
				return uint32_t((k << 8U) ^ (z << 8U) ^ (y << 16U) ^ (z << 24U) ^ x);
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t rs(const uint32_t ke, const uint32_t ko) noexcept) {
				uint32_t key{ko};
				uint32_t rem{ke};

				for (uint8_t i{}; i < 8U; ++i) {
					key = uint32_t(rs_mod(key) ^ (rem >> 24U));
					rem <<= 8U;
				}
				return key;
			}

			inline void box_lookup(uint8_t& val, const uint8_t box, const uint32_t key, const uint8_t shift) noexcept {
				val = uint8_t(box_seeds[box][val] ^ ((key >> shift) & 0xFFU));
			}

			template <typename T>
			SUBSTRATE_NO_DISCARD(inline uint32_t g(const uint32_t val, const T* key, const size_t len) noexcept) {
				constexpr std::array<std::array<uint8_t, 4>, 5> box_tlb{{
					{{ 1U, 0U, 0U, 1U }},
					{{ 1U, 1U, 0U, 0U }},
					{{ 0U, 1U, 0U, 1U }},
					{{ 0U, 0U, 1U, 1U }},
					{{ 1U, 0U, 1U, 0U }},
				}};

				uint8_t a{uint8_t(val & 0xFFU)};
				uint8_t b{uint8_t((val >>  8U) & 0xFFU)};
				uint8_t c{uint8_t((val >> 16U) & 0xFFU)};
				uint8_t d{uint8_t((val >> 24U) & 0xFFU)};

				for (uint8_t i{}; i < 4; ++i) {
					const uint32_t idx{6U - (i << 1U)};
					box_lookup(a, box_tlb[i][0], key[idx], 0U);
					box_lookup(b, box_tlb[i][1], key[idx], 8U);
					box_lookup(c, box_tlb[i][2], key[idx], 16U);
					box_lookup(d, box_tlb[i][3], key[idx], 24U);
				}
				return mds_mult(box_seeds[1][a], box_seeds[0][b], box_seeds[1][c], box_seeds[0][d]);
			}

			template <typename T, size_t n>
			SUBSTRATE_NO_DISCARD(inline uint32_t g(const uint32_t val, const std::array<T, n>& key) noexcept) {
				return g(val, key.data(), key.size());
			}

			template<typename T>
			SUBSTRATE_NO_DISCARD(inline uint32_t key_mds(const uint8_t idx, const T* key, const size_t len) noexcept) {
				return g(
					uint32_t(idx ^ (idx << 8U) ^ (idx << 16U) ^ (idx << 24U)),
					key, len
				);
			}

			template<typename T, std::size_t len>
			SUBSTRATE_NO_DISCARD(inline uint32_t key_mds(const uint8_t idx, const std::array<T, len>& key) noexcept) {
				return key_mds(idx, key.data(), key.size());
			}
		}

		enum struct twofish_mode_t : uint8_t {
			CBC = 0x00U,
			CTR = 0x01U,
		};

		template<uint8_t rnds, twofish_mode_t m>
		struct twofish_t {
			static_assert(rnds >= 16, "Round count must be 16 or more");

			static constexpr uint8_t rounds{rnds};
			static constexpr twofish_mode_t mode{m};

		private:
			std::array<uint32_t, 40> _key{{}};
			std::array<uint32_t, 8> _sbox_key{{}};
			std::array<uint32_t, 4> _iv{{}};
			std::array<uint32_t, 8> _kparts{{}};

			void enc_rnd(const uint8_t rn, const uint32_t a, const uint32_t b, uint32_t& c, uint32_t& d) noexcept {
				uint32_t a1{g(a, _sbox_key)};
				uint32_t b1{g(rotl(b, 8U), _sbox_key)};
				a1 += b1;
				b1 += a1;
				a1 += _key[(rn << 1U) + 8];
				b1 += _key[(rn << 1U) + 9];
				c = rotr(c ^ a1, 1);
				d = rotl(d, 1) ^ b1;
			}

			void enc_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				std::array<uint32_t, 4> state{{
					uint32_t(src[0] ^ _key[0]),
					uint32_t(src[1] ^ _key[1]),
					uint32_t(src[2] ^ _key[2]),
					uint32_t(src[3] ^ _key[3]),
				}};

				for (uint8_t i{}; i < rounds; ++i) {
					enc_rnd(
						i,
						state[0 + ((i & 1U) << 1U)],
						state[1 + ((i & 1U) << 1U)],
						state[2 - ((i & 1U) << 1U)],
						state[3 - ((i & 1U) << 1U)]
					);
				}

				dst[0] = uint32_t(state[2] ^ _key[4]);
				dst[1] = uint32_t(state[3] ^ _key[5]);
				dst[2] = uint32_t(state[0] ^ _key[6]);
				dst[3] = uint32_t(state[1] ^ _key[7]);
			}

			void dec_rnd(const uint8_t rn, const uint32_t a, const uint32_t b, uint32_t& c, uint32_t& d) noexcept {
				uint32_t a1{g(a, _sbox_key)};
				uint32_t b1{g(rotl(b, 8U), _sbox_key)};
				a1 += b1;
				b1 += a1;
				a1 += _key[(rn << 1U) + 8];
				b1 += _key[(rn << 1U) + 9];
				c = rotr(c, 1) ^ a1;
				d = rotl(d ^ b1, 1);
			}

			void dec_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				std::array<uint32_t, 4> state{{
					uint32_t(src[2] ^ _key[6]),
					uint32_t(src[3] ^ _key[7]),
					uint32_t(src[0] ^ _key[4]),
					uint32_t(src[1] ^ _key[5]),
				}};

				for (uint8_t i{}; i < rounds; ++i) {
					dec_rnd(
						uint8_t((rounds - 1) - i),
						state[2 - ((i & 1U) << 1U)],
						state[3 - ((i & 1U) << 1U)],
						state[0 + ((i & 1U) << 1U)],
						state[1 + ((i & 1U) << 1U)]
					);
				}

				dst[0] = uint32_t(state[0] ^ _key[0]);
				dst[1] = uint32_t(state[1] ^ _key[1]);
				dst[2] = uint32_t(state[2] ^ _key[2]);
				dst[3] = uint32_t(state[3] ^ _key[3]);
			}

		public:
			~twofish_t() noexcept {
				// TODO(aki): secure erase memory!
				std::memset(_key.data(), 0, _key.size());
				std::memset(_sbox_key.data(), 0, _sbox_key.size());
				std::memset(_iv.data(), 0, _iv.size());
				std::memset(_kparts.data(), 0, _kparts.size());
			}

			// TODO(aki): make endian aware
			// Initial vector initialization (CBC Mode)
			template<typename T, std::size_t len, twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CBC>::type
			set_iv(const std::array<T, len>& iv) noexcept {
				static_assert(sizeof(T) * len == 16, "Initial Vector must be exactly 16 bytes (128 bits)");
				std::memcpy(_iv.data(), iv.data(), 16);
			}

			// TODO(aki): make endian aware
			// Initial vector/Nonce (CTR Mode)
			template<typename T, std::size_t len, twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CTR>::type
			set_iv(const std::array<T, len>& iv) noexcept {
				static_assert(sizeof(T) * len == 8, "Initial Vector / Nonce must be exactly 8 bytes (64 bits)");
				std::memcpy(_iv.data(), iv.data(), 8);
				std::memset(_iv.data() + 8, 0, 8);
			}

			// TODO(aki): make endian aware
			// Set the CTR counter
			template<twofish_mode_t _mode = mode>
			typename std::enable_if<_mode == twofish_mode_t::CTR>::type
			set_counter(const uint64_t counter) noexcept {
				std::memcpy(_iv.data() + 8, &counter, sizeof(counter));
			}

			// TODO(aki): make endian aware
			// Key initialization and scheduling
			template<typename T, std::size_t len>
			void set_key(const std::array<T, len>& key) noexcept {
				static_assert(sizeof(T) * len == 32, "Key must be exactly 32 bytes (256 bits)");
				std::memcpy(_kparts.data(), key.data(), 32);

				for (uint8_t i{}; i < _key.size();) {
					uint32_t a{key_mds(i, _kparts)};
					uint32_t b{rotl(key_mds((i + 1U), _kparts /* Needs to be offset by 1 */), 8U)};
					_key[i++] = uint32_t(a + b);
					_key[i++] = uint32_t(rotl(a + (b << 1U), 9));
				}

				for (uint8_t i{}; i < 4; ++i) {
					_sbox_key[(3U - i) << 1U] = rs(_kparts[i << 1U], _kparts[(i << 1U) | 1u]);
				}

				std::memset(_kparts.data(), 0, _kparts.size());
			}


			// CBC Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CBC, void>::type
			encrypt_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				std::array<uint32_t, 4> state{{}};

				for (uint8_t i{}; i < 4; ++i) {
					state[i] = uint32_t(_iv[i] ^ src[i]);
				}

				enc_blk(state, dst);

				for (uint8_t i{}; i < 4; ++i) {
					_iv[i] = dst[i];
				}
			}

			// CTR Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CTR, void>::type
			encrypt_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				/* In CTR mode, the last 8 bytes of the IV are the counter and the first are the nonce */
				std::array<uint32_t, 4> state{{}};

				enc_blk(_iv, state);

				dst[0] = uint32_t(src[0] ^ state[0]);
				dst[1] = uint32_t(src[1] ^ state[1]);
				dst[2] = uint32_t(src[2] ^ state[2]);
				dst[3] = uint32_t(src[3] ^ state[3]);

				// TODO(aki): increment counter (_iv[2:3])
			}

			// CTR Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CTR, void>::type
			encrypt_blk_by_idx(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst, const uint64_t idx) noexcept {
				/* In CTR mode, the last 8 bytes of the IV are the counter and the first are the nonce */
				std::array<uint32_t, 4> state{{}};
				std::array<uint32_t, 4> nonce{_iv};

				std::memcpy(nonce.data() + 8, &idx, sizeof(idx));

				enc_blk(nonce, state);

				dst[0] = uint32_t(src[0] ^ state[0]);
				dst[1] = uint32_t(src[1] ^ state[1]);
				dst[2] = uint32_t(src[2] ^ state[2]);
				dst[3] = uint32_t(src[3] ^ state[3]);
			}

			// CBC Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CBC, void>::type
			decrypt_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				dec_blk(src, dst);

				for (uint8_t i{}; i < 4; ++i) {
					dst[i] ^= _iv[i];
					_iv[i] = src[i];
				}
			}

			// CTR Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CTR, void>::type
			decrypt_blk(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst) noexcept {
				/* In CTR mode, the last 8 bytes of the IV are the counter and the first are the nonce */
				std::array<uint32_t, 4> state{{}};

				/* In CTR mode we just, do the encrypt/xor again */

				enc_blk(_iv, state);

				dst[0] = uint32_t(src[0] ^ state[0]);
				dst[1] = uint32_t(src[1] ^ state[1]);
				dst[2] = uint32_t(src[2] ^ state[2]);
				dst[3] = uint32_t(src[3] ^ state[3]);

				// TODO(aki): increment counter (_iv[2:3])
			}

			// CTR Mode
			template<twofish_mode_t _mode = m>
			typename std::enable_if<_mode == twofish_mode_t::CTR, void>::type
			decrypt_blk_by_idx(const std::array<uint32_t, 4>& src, std::array<uint32_t, 4>& dst, const uint64_t idx) noexcept {
				/* In CTR mode, the last 8 bytes of the IV are the counter and the first are the nonce */
				std::array<uint32_t, 4> state{{}};
				std::array<uint32_t, 4> nonce{_iv};

				std::memcpy(nonce.data() + 8, &idx, sizeof(idx));

				/* In CTR mode we just, do the encrypt/xor again */
				enc_blk(nonce, state);

				dst[0] = uint32_t(src[0] ^ state[0]);
				dst[1] = uint32_t(src[1] ^ state[1]);
				dst[2] = uint32_t(src[2] ^ state[2]);
				dst[3] = uint32_t(src[3] ^ state[3]);
			}
		};

		using twofish_ctr_t = twofish_t<16, twofish_mode_t::CTR>;
		using twofish_cbc_t = twofish_t<16, twofish_mode_t::CBC>;
	}
}

#endif /* SUBSTRATE_CRYPTO_TWOFISH */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
