// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_CRYPTO_SHA512
#define SUBSTRATE_CRYPTO_SHA512

#include <type_traits>
#include <limits>
#include <cstdint>
#include <array>

#include <substrate/internal/defs>
#include <substrate/utility>
#include <substrate/bits>
#include <substrate/buffer_utils>
#include <substrate/span>


namespace substrate
{
	namespace crypto {
		namespace {
			constexpr std::array<uint64_t, 80> k{{
				UINT64_C(0x428A2F98D728AE22), UINT64_C(0x7137449123EF65CD),
				UINT64_C(0xB5C0FBCFEC4D3B2F), UINT64_C(0xE9B5DBA58189DBBC),
				UINT64_C(0x3956C25BF348B538), UINT64_C(0x59F111F1B605D019),
				UINT64_C(0x923F82A4AF194F9B), UINT64_C(0xAB1C5ED5DA6D8118),
				UINT64_C(0xD807AA98A3030242), UINT64_C(0x12835B0145706FBE),
				UINT64_C(0x243185BE4EE4B28C), UINT64_C(0x550C7DC3D5FFB4E2),
				UINT64_C(0x72BE5D74F27B896F), UINT64_C(0x80DEB1FE3B1696B1),
				UINT64_C(0x9BDC06A725C71235), UINT64_C(0xC19BF174CF692694),
				UINT64_C(0xE49B69C19EF14AD2), UINT64_C(0xEFBE4786384F25E3),
				UINT64_C(0x0FC19DC68B8CD5B5), UINT64_C(0x240CA1CC77AC9C65),
				UINT64_C(0x2DE92C6F592B0275), UINT64_C(0x4A7484AA6EA6E483),
				UINT64_C(0x5CB0A9DCBD41FBD4), UINT64_C(0x76F988DA831153B5),
				UINT64_C(0x983E5152EE66DFAB), UINT64_C(0xA831C66D2DB43210),
				UINT64_C(0xB00327C898FB213F), UINT64_C(0xBF597FC7BEEF0EE4),
				UINT64_C(0xC6E00BF33DA88FC2), UINT64_C(0xD5A79147930AA725),
				UINT64_C(0x06CA6351E003826F), UINT64_C(0x142929670A0E6E70),
				UINT64_C(0x27B70A8546D22FFC), UINT64_C(0x2E1B21385C26C926),
				UINT64_C(0x4D2C6DFC5AC42AED), UINT64_C(0x53380D139D95B3DF),
				UINT64_C(0x650A73548BAF63DE), UINT64_C(0x766A0ABB3C77B2A8),
				UINT64_C(0x81C2C92E47EDAEE6), UINT64_C(0x92722C851482353B),
				UINT64_C(0xA2BFE8A14CF10364), UINT64_C(0xA81A664BBC423001),
				UINT64_C(0xC24B8B70D0F89791), UINT64_C(0xC76C51A30654BE30),
				UINT64_C(0xD192E819D6EF5218), UINT64_C(0xD69906245565A910),
				UINT64_C(0xF40E35855771202A), UINT64_C(0x106AA07032BBD1B8),
				UINT64_C(0x19A4C116B8D2D0C8), UINT64_C(0x1E376C085141AB53),
				UINT64_C(0x2748774CDF8EEB99), UINT64_C(0x34B0BCB5E19B48A8),
				UINT64_C(0x391C0CB3C5C95A63), UINT64_C(0x4ED8AA4AE3418ACB),
				UINT64_C(0x5B9CCA4F7763E373), UINT64_C(0x682E6FF3D6B2B8A3),
				UINT64_C(0x748F82EE5DEFB2FC), UINT64_C(0x78A5636F43172F60),
				UINT64_C(0x84C87814A1F0AB72), UINT64_C(0x8CC702081A6439EC),
				UINT64_C(0x90BEFFFA23631E28), UINT64_C(0xA4506CEBDE82BDE9),
				UINT64_C(0xBEF9A3F7B2C67915), UINT64_C(0xC67178F2E372532B),
				UINT64_C(0xCA273ECEEA26619C), UINT64_C(0xD186B8C721C0C207),
				UINT64_C(0xEADA7DD6CDE0EB1E), UINT64_C(0xF57D4F7FEE6ED178),
				UINT64_C(0x06F067AA72176FBA), UINT64_C(0x0A637DC5A2C898A6),
				UINT64_C(0x113F9804BEF90DAE), UINT64_C(0x1B710B35131C471B),
				UINT64_C(0x28DB77F523047D84), UINT64_C(0x32CAAB7B40C72493),
				UINT64_C(0x3C9EBE0A15C9BEBC), UINT64_C(0x431D67C49C100D4C),
				UINT64_C(0x4CC5D4BECB3E42B6), UINT64_C(0x597F299CFC657E2A),
				UINT64_C(0x5FCB6FAB3AD6FAEC), UINT64_C(0x6C44198C4A475817)
			}};

			SUBSTRATE_NO_DISCARD(inline uint64_t Ch(const uint64_t E, const uint64_t F, const uint64_t G) noexcept) {
				return uint64_t((E & F) ^ ((~E) & G));
			}

			SUBSTRATE_NO_DISCARD(inline uint64_t Ma(const uint64_t A, const uint64_t B, const uint64_t C) noexcept) {
				return uint64_t((A & B) ^ (A & C) ^ (B & C));
			}

			SUBSTRATE_NO_DISCARD(inline uint64_t S0(const uint64_t A) noexcept) {
				return uint64_t(rotr(A, 28) ^ rotl(A, 30) ^ rotl(A, 25));
			}

			SUBSTRATE_NO_DISCARD(inline uint64_t S1(const uint64_t E) noexcept) {
				return uint64_t(rotr(E, 14) ^ rotr(E, 18) ^ rotl(E, 23));
			}

			inline void rnd_stp(const size_t n, const uint64_t A, const uint64_t B, const uint64_t C, uint64_t& D, const uint64_t E, const uint64_t F, const uint64_t G, uint64_t& H, const uint64_t W) noexcept {
				const uint64_t t1{Ch(E, F, G) + H + W + k[n] + S1(E)};
				D += t1;
				H = t1 + Ma(A, B, C) + S0(A);
			}
		}

		namespace bu = substrate::buffer_utils;

		struct sha512_t {
		private:
			std::array<uint64_t, 8> _state{{}};
			std::uint64_t _len{};

			struct ext_msg_t {
			private:
				std::array<uint64_t, 16> _blks;
				SUBSTRATE_NO_DISCARD(uint64_t& W(const size_t idx) noexcept) {
					return _blks[idx & 15U];
				}
			public:
				template<typename T, std::size_t len>
				ext_msg_t(const std::array<T, len>& msg) noexcept {
					static_assert(sizeof(T) * len >= 16 * sizeof(uint64_t), "msg too small");
					for (size_t i{}; i < 16; ++i) {
						_blks[i] = bu::readBE<uint64_t>(msg.data() + i);
					}
				}

				SUBSTRATE_NO_DISCARD(uint64_t operator[](const size_t i) noexcept) {
					if (i < 16) {
						return W(i);
					}

					uint64_t s0{rotr(W(i - 15U),  1U) ^ rotr(W(i - 15U), 8U) ^ (W(i - 15U) >> 7U)};
					uint64_t s1{rotr(W(i -  2U), 19U) ^ rotl(W(i -  2U), 3U) ^ (W(i -  2U) >> 6U)};
					return W(i) = W(i - 16U) + s0 + W(i - 7U) + s1;
				}
			};

			void reset_state() noexcept {
				_state[0] = UINT64_C(0x6A09E667F3BCC908);
				_state[1] = UINT64_C(0xBB67AE8584CAA73B);
				_state[2] = UINT64_C(0x3C6EF372FE94F82B);
				_state[3] = UINT64_C(0xA54FF53A5F1D36F1);
				_state[4] = UINT64_C(0x510E527FADE682D1);
				_state[5] = UINT64_C(0x9B05688C2B3E6C1F);
				_state[6] = UINT64_C(0x1F83D9ABFB41BD6B);
				_state[7] = UINT64_C(0x5BE0CD19137E2179);
			}

			template<typename T, std::size_t len>
			void round(std::array<uint64_t, 8>& i_state, const std::array<T, len>& msg) noexcept {
				ext_msg_t W(msg);
				auto state{i_state};

				for (size_t i{}; i < 80; ++i) {
					rnd_stp(
						i,
						state[7U - ((i + 7U) % 8U)],
						state[7U - ((i + 6U) % 8U)],
						state[7U - ((i + 5U) % 8U)],
						state[7U - ((i + 4U) % 8U)],
						state[7U - ((i + 3U) % 8U)],
						state[7U - ((i + 2U) % 8U)],
						state[7U - ((i + 1U) % 8U)],
						state[7U - (i % 8U)], W[i]
					);
				}

				for (size_t i{}; i < state.size(); ++i) {
					i_state[i] += state[i];
				}
			}

		public:
			sha512_t() noexcept {
				reset_state();
			}

			template<typename T, std::size_t len>
			void round(const std::array<T, len>& msg) noexcept {
				_len += 128;
				round(_state, msg);
			}

			template<typename T>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 64> hash(const T* data, std::size_t len) noexcept) {
				std::array<uint8_t, 64> _hash{{}};
				std::array<uint64_t, 16> block{{}};

				std::memcpy(block.data(), data, len);
				std::memset(
					// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
					reinterpret_cast<uint8_t*>( // lgtm[cpp/reinterpret-cast]
						block.data()
					) + len,
					0x80U,
					1
				);
				_len += len;
				if (len > 111) {
					round(_state, block);
					block.fill(UINT64_C(0x0000000000000000));
				}

				bu::writeBE(uint64_t(_len << 3U), block.data() + 15);
				bu::writeBE(uint64_t(_len >> 61U), block.data() + 14);

				round(_state, block);

				for (uint8_t i{}; i < _state.size(); ++i){
					bu::writeBE(
						_state[i],
						// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
						reinterpret_cast<uint8_t*>( // lgtm[cpp/reinterpret-cast]
							_hash.data()
						) + (i * sizeof(uint64_t))
					);
				}

				/* Hashing is done, reset our state */
				reset_state();

				return _hash;
			}

			template<typename T>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 64> hash(const span<T>& msg) noexcept) {
				return hash(msg.data(), msg.size());
			}

			template<typename T, std::size_t len>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 64> hash(const std::array<T, len>& msg) noexcept) {
				return hash(msg.data(), msg.size());
			}

			template<typename T, std::size_t len>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 64> operator()(const std::array<T, len>& msg) noexcept) {
				uint64_t bidx{};
				std::array<uint64_t, 16> buf{};

				const uint64_t blk_max{len & ~127};

				while (bidx != blk_max) {
					for (uint8_t i{}; i < 16; ++i) {
						buf[i] = bu::readLE<uint64_t>(
							// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
							reinterpret_cast<const uint8_t*>( // lgtm[cpp/reinterpret-cast]
								msg.data() + i
							) + bidx
						);
					}
					round(buf);
					bidx += 128;
				}

				return hash(
					// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
					reinterpret_cast<const uint8_t*>( // lgtm[cpp/reinterpret-cast]
						msg.data()
					) + bidx,
					size_t(len - bidx)
				);
			}
		};
	}
}

#endif /* SUBSTRATE_CRYPTO_SHA512 */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
