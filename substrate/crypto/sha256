// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_CRYPTO_SHA256
#define SUBSTRATE_CRYPTO_SHA256

#include <type_traits>
#include <limits>
#include <cstdint>
#include <array>

#include <substrate/internal/defs>
#include <substrate/utility>
#include <substrate/bits>
#include <substrate/buffer_utils>
#include <substrate/span>

namespace substrate
{
	namespace crypto {
		namespace {
			constexpr std::array<uint32_t, 64> k{{
				UINT32_C(0x428A2F98), UINT32_C(0x71374491),
				UINT32_C(0xB5C0FBCF), UINT32_C(0xE9B5DBA5),
				UINT32_C(0x3956C25B), UINT32_C(0x59F111F1),
				UINT32_C(0x923F82A4), UINT32_C(0xAB1C5ED5),
				UINT32_C(0xD807AA98), UINT32_C(0x12835B01),
				UINT32_C(0x243185BE), UINT32_C(0x550C7DC3),
				UINT32_C(0x72BE5D74), UINT32_C(0x80DEB1FE),
				UINT32_C(0x9BDC06A7), UINT32_C(0xC19BF174),
				UINT32_C(0xE49B69C1), UINT32_C(0xEFBE4786),
				UINT32_C(0x0FC19DC6), UINT32_C(0x240CA1CC),
				UINT32_C(0x2DE92C6F), UINT32_C(0x4A7484AA),
				UINT32_C(0x5CB0A9DC), UINT32_C(0x76F988DA),
				UINT32_C(0x983E5152), UINT32_C(0xA831C66D),
				UINT32_C(0xB00327C8), UINT32_C(0xBF597FC7),
				UINT32_C(0xC6E00BF3), UINT32_C(0xD5A79147),
				UINT32_C(0x06CA6351), UINT32_C(0x14292967),
				UINT32_C(0x27B70A85), UINT32_C(0x2E1B2138),
				UINT32_C(0x4D2C6DFC), UINT32_C(0x53380D13),
				UINT32_C(0x650A7354), UINT32_C(0x766A0ABB),
				UINT32_C(0x81C2C92E), UINT32_C(0x92722C85),
				UINT32_C(0xA2BFE8A1), UINT32_C(0xA81A664B),
				UINT32_C(0xC24B8B70), UINT32_C(0xC76C51A3),
				UINT32_C(0xD192E819), UINT32_C(0xD6990624),
				UINT32_C(0xF40E3585), UINT32_C(0x106AA070),
				UINT32_C(0x19A4C116), UINT32_C(0x1E376C08),
				UINT32_C(0x2748774C), UINT32_C(0x34B0BCB5),
				UINT32_C(0x391C0CB3), UINT32_C(0x4ED8AA4A),
				UINT32_C(0x5B9CCA4F), UINT32_C(0x682E6FF3),
				UINT32_C(0x748F82EE), UINT32_C(0x78A5636F),
				UINT32_C(0x84C87814), UINT32_C(0x8CC70208),
				UINT32_C(0x90BEFFFA), UINT32_C(0xA4506CEB),
				UINT32_C(0xBEF9A3F7), UINT32_C(0xC67178F2)
			}};

			SUBSTRATE_NO_DISCARD(inline uint32_t Ch(const uint32_t E, const uint32_t F, const uint32_t G) noexcept) {
				return uint32_t((E & F) ^ ((~E) & G));
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t Ma(const uint32_t A, const uint32_t B, const uint32_t C) noexcept) {
				return uint32_t((A & B) ^ (A & C) ^ (B & C));
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t S0(const uint32_t A) noexcept) {
				return uint32_t(rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22));
			}

			SUBSTRATE_NO_DISCARD(inline uint32_t S1(const uint32_t E) noexcept) {
				return uint32_t(rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25));
			}

			inline void rnd_stp(const size_t n, const uint32_t A, const uint32_t B, const uint32_t C, uint32_t& D, const uint32_t E, const uint32_t F, const uint32_t G, uint32_t& H, const uint32_t W) noexcept {
				const uint32_t t1{Ch(E, F, G) + H + W + k[n] + S1(E)};
				D += t1;
				H = t1 + Ma(A, B, C) + S0(A);
			}
		}

		namespace bu = substrate::buffer_utils;

		struct sha256_t {
		private:
			struct ext_msg_t {
			private:
				std::array<uint32_t, 16> _blks;
				SUBSTRATE_NO_DISCARD(uint32_t& W(const size_t idx) noexcept) {
					return _blks[idx & 15U];
				}
			public:
				template<typename T, std::size_t len>
				ext_msg_t(const std::array<T, len>& msg) noexcept {
					static_assert(sizeof(T) * len >= 16 * sizeof(uint32_t), "msg too small");
					for (uint8_t i{}; i < 16; ++i) {
						_blks[i] = bu::readBE<uint32_t>(msg.data() + i);
					}
				}

				SUBSTRATE_NO_DISCARD(uint32_t operator[](const size_t i) noexcept) {
					if (i < 16) {
						return W(i);
					}

					uint32_t s0{rotr(W(i - 15U),  7U) ^ rotr(W(i - 15U), 18U) ^ (W(i - 15U) >>  3U)};
					uint32_t s1{rotr(W(i -  2U), 17U) ^ rotr(W(i -  2U), 19U) ^ (W(i -  2U) >> 10U)};
					return W(i) = W(i - 16U) + s0 + W(i - 7U) + s1;
				}
			};

			std::array<uint32_t, 8> _state{{}};
			std::uint64_t _len{};


			void reset_state() noexcept {
				_state[0] = UINT32_C(0x6A09E667);
				_state[1] = UINT32_C(0xBB67AE85);
				_state[2] = UINT32_C(0x3C6EF372);
				_state[3] = UINT32_C(0xA54FF53A);
				_state[4] = UINT32_C(0x510E527F);
				_state[5] = UINT32_C(0x9B05688C);
				_state[6] = UINT32_C(0x1F83D9AB);
				_state[7] = UINT32_C(0x5BE0CD19);
			}

			template<typename T, std::size_t len>
			void round(std::array<uint32_t, 8>& i_state, const std::array<T, len>& msg) noexcept {
				ext_msg_t W{msg};
				auto state{i_state};

				for (size_t i{}; i < 64; ++i) {
					rnd_stp(
						i,
						state[7U - ((i + 7U) % 8U)],
						state[7U - ((i + 6U) % 8U)],
						state[7U - ((i + 5U) % 8U)],
						state[7U - ((i + 4U) % 8U)],
						state[7U - ((i + 3U) % 8U)],
						state[7U - ((i + 2U) % 8U)],
						state[7U - ((i + 1U) % 8U)],
						state[7U - (i % 8U)], W[i]
					);
				}
				for (size_t i{}; i < state.size(); ++i) {
					i_state[i] += state[i];
				}
			}

		public:
			sha256_t() noexcept {
				reset_state();
			}

			template<typename T, std::size_t len>
			void round(const std::array<T, len>& msg) noexcept {
				_len += 64;
				round(_state, msg);
			}

			template<typename T>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 32> hash(const T* data, std::size_t len) noexcept) {
				std::array<uint8_t, 32> _hash{{}};
				std::array<uint32_t, 16> block{{}};

				std::memcpy(block.data(), data, len);
				std::memset(
					// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
					reinterpret_cast<uint8_t*>( // lgtm[cpp/reinterpret-cast]
						block.data()
					) + len,
					0x80U,
					1
				);

				_len += len;
				if (len > 54) {
					round(_state, block);
					block.fill(UINT32_C(0x00000000));
				}

				const uint64_t nlen{_len << 3U};

				bu::writeBE(nlen, block.data() + 14);

				round(_state, block);

				for (uint8_t i{}; i < _state.size(); ++i){
					bu::writeBE(
						_state[i],
						// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
						reinterpret_cast<uint8_t*>( // lgtm[cpp/reinterpret-cast]
							_hash.data()
						) + (i * sizeof(uint32_t))
					);
				}

				/* Hashing is done, reset our state */
				reset_state();

				return _hash;
			}

			template<typename T>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 32> hash(const span<T>& msg) noexcept) {
				return hash(msg.data(), msg.size());
			}

			template<typename T, std::size_t len>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 32> hash(const std::array<T, len>& msg) noexcept) {
				return hash(msg.data(), msg.size());
			}

			template<typename T, std::size_t len>
			SUBSTRATE_NO_DISCARD(std::array<uint8_t, 32> operator()(const std::array<T, len>& msg) noexcept) {
				uint64_t bidx{};
				std::array<uint32_t, 16> buf{};

				const uint64_t blk_max{len & ~63};

				while (bidx != blk_max) {
					for (uint8_t i{}; i < 16; ++i) {
						buf[i] = bu::readLE<uint32_t>(
							// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
							reinterpret_cast<const uint8_t*>( // lgtm[cpp/reinterpret-cast]
								msg.data() + i
							) + bidx
						);
					}
					round(buf);
					bidx += 64;
				}

				return hash(
					// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
					reinterpret_cast<const uint8_t*>( // lgtm[cpp/reinterpret-cast]
						msg.data()
					) + bidx,
					size_t(len - bidx)
				);
			}
		};
	}
}

#endif /* SUBSTRATE_CRYPTO_SHA256 */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
