// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_MEMFD
#define SUBSTRATE_MEMFD
#ifdef _WINDOWS
#	error "memfd is a *nix only header"
#endif

#include <cstdint>
#include <unistd.h>
#include <memory>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <string>

#include <substrate/internal/defs>
#ifdef SUBSTRATE_MANAGED_PTR
#	include <substrate/utility>
#endif
#include <substrate/mmap>

namespace substrate
{
	namespace internal
	{
		using stat_t = struct stat;
		using ::fstat;
	}

	template<size_t size> struct memfd_t final
	{
	private:
		int32_t fd;
		mutable bool eof;

	public:
		constexpr memfd_t() noexcept : fd{-1}, eof{false} { }
		constexpr memfd_t(const int32_t fd_) noexcept : fd{fd_}, eof{false} { }
		memfd_t(const char *const file, const uint32_t flags) noexcept :
			fd{::memfd_create(file, flags)}, eof{false} { ::ftruncate(fd, size); }
		memfd_t(const std::string& file, const uint32_t flags) noexcept :
			fd{::memfd_create(file.c_str(), flags)}, eof{false} { ::ftruncate(fd, size); }
		memfd_t(memfd_t &&memfd_) noexcept { swap(memfd_); }
		~memfd_t() noexcept { if (fd != -1) close(fd); }

		void operator =(memfd_t &&memfd_) noexcept { swap(memfd_); }
		SUBSTRATE_NO_DISCARD(operator int32_t() const noexcept) { return fd; }
		SUBSTRATE_NO_DISCARD(bool operator ==(const int32_t desc) const noexcept) { return fd == desc; }

		SUBSTRATE_NO_DISCARD(bool valid() const noexcept) { return fd != -1; }
		SUBSTRATE_NO_DISCARD(bool isEOF() const noexcept) { return eof; }
		void invalidate() noexcept { fd = -1; }

		void swap(memfd_t &desc)
		{
			std::swap(fd, desc.fd);
			std::swap(eof, desc.eof);
		}

		SUBSTRATE_NO_DISCARD(bool read(void *const value, const size_t valueLen, size_t &resultLen) const noexcept)
		{
			if (eof)
				return false;
			const ssize_t result = read(value, valueLen, nullptr);
			if (!result && valueLen)
				eof = true;
			else if (result < 0)
				return false;
			resultLen = size_t(result);
			return resultLen == valueLen;
		}

		SUBSTRATE_NO_DISCARD(bool read(void *const value, size_t valueLen) const noexcept)
		{
			size_t resultLen = 0;
			return read(value, valueLen, resultLen);
		}

		SUBSTRATE_NO_DISCARD(bool write(const void *const value, const size_t valueLen) const noexcept)
		{
			const ssize_t result = write(value, valueLen, nullptr);
			if (result < 0)
				return false;
			return size_t(result) == valueLen;
		}

		SUBSTRATE_NO_DISCARD(ssize_t read(void *const bufferPtr, const size_t len, std::nullptr_t) const noexcept)
			{ return ::read(fd, bufferPtr, len); }
		SUBSTRATE_NO_DISCARD(ssize_t write(const void *const bufferPtr, const size_t valueLen, std::nullptr_t) const noexcept)
			{ return ::write(fd, bufferPtr, valueLen); }

		SUBSTRATE_NO_DISCARD(off_t seek(const off_t offset, const int32_t whence) const noexcept)
			{ return ::lseek(fd, offset, whence); }
		SUBSTRATE_NO_DISCARD(off_t tell() const noexcept) { return ::lseek(fd, 0, SEEK_CUR); }

		SUBSTRATE_NO_DISCARD(bool head() const noexcept) { return seek(0, SEEK_SET) == 0; }
		SUBSTRATE_NO_DISCARD(bool tail() const noexcept)
		{
			const auto result = seek(static_cast<off_t>(length()), SEEK_SET);
			if (result < 0)
				return false;
			return std::size_t(result) == length();
		}

		SUBSTRATE_NO_DISCARD(memfd_t dup() const noexcept) { return ::dup(fd); }

		SUBSTRATE_NO_DISCARD(int flags() const noexcept) { return ::fcntl(fd, F_GETFL); }
		SUBSTRATE_NO_DISCARD(int flags(const int flags) const noexcept) { return ::fcntl(fd, F_SETFL, flags); }

		SUBSTRATE_NO_DISCARD(internal::stat_t stat() const noexcept)
		{
			internal::stat_t fileStat{};
			if (!internal::fstat(fd, &fileStat))
				return fileStat;
			return {};
		}

		SUBSTRATE_NO_DISCARD(size_t length() const noexcept) { return size; };

		template<typename T> bool read(T &value) const noexcept
			{ return read(&value, sizeof(T)); }
		template<typename T> bool write(const T &value) const noexcept
			{ return write(&value, sizeof(T)); }
		template<typename T> bool read(std::unique_ptr<T> &value) const noexcept
			{ return read(value.get(), sizeof(T)); }
		template<typename T> bool read(const std::unique_ptr<T> &value) const noexcept
			{ return read(value.get(), sizeof(T)); }
		template<typename T> bool write(const std::unique_ptr<T> &value) const noexcept
			{ return write(value.get(), sizeof(T)); }
		template<typename T> bool read(const std::unique_ptr<T []> &value, const size_t valueCount) const noexcept
			{ return read(value.get(), sizeof(T) * valueCount); }
		template<typename T> bool write(const std::unique_ptr<T []> &value, const size_t valueCount) const noexcept
			{ return write(value.get(), sizeof(T) * valueCount); }
		template<typename T, size_t N> bool read(std::array<T, N> &value) const noexcept
			{ return read(value.data(), sizeof(T) * N); }
		template<typename T, size_t N> bool write(const std::array<T, N> &value) const noexcept
			{ return write(value.data(), sizeof(T) * N); }

#ifdef SUBSTRATE_MANAGED_PTR
	template<typename T> enable_if_t<!std::is_array<T>::value, bool>
		read(const managedPtr_t<T> &value) const noexcept { return read(value.get(), sizeof(T)); }
	template<typename T> enable_if_t<!std::is_array<T>::value, bool>
		write(const managedPtr_t<T> &value) const noexcept { return write(value.get(), sizeof(T)); }
	template<typename T> bool read(const managedPtr_t<T> &value, const size_t valueLen) const noexcept
		{ return read(value.get(), valueLen); }
	template<typename T> bool write(const managedPtr_t<T> &value, const size_t valueLen) const noexcept
		{ return write(value.get(), valueLen); }
#endif

#ifdef SUBSTRATE_FIXED_VECTOR
	template<typename T> bool read(const fixedVector_t<T> &value) const noexcept
		{ return read(value.data(), sizeof(T) * value.size()); }
	template<typename T> bool write(const fixedVector_t<T> &value) const noexcept
		{ return write(value.data(), sizeof(T) * value.size()); }
#endif

		template<size_t length, typename T, size_t N> bool read(std::array<T, N> &value) const noexcept
		{
			static_assert(length <= N, "Can't request to read more than the std::array<> length");
			return read(value.data(), sizeof(T) * length);
		}

		template<size_t length, typename T, size_t N> bool write(const std::array<T, N> &value) const noexcept
		{
			static_assert(length <= N, "Can't request to write more than the std::array<> length");
			return write(value.data(), sizeof(T) * length);
		}

		SUBSTRATE_NO_DISCARD(bool readLE(uint16_t &value) const noexcept)
		{
			std::array<uint8_t, 2> data{};
			const bool result = read(data);
			value = uint16_t((uint16_t(data[1]) << 8U) | data[0]);
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeLE(const uint16_t value) const noexcept)
		{
			const std::array<uint8_t, 2> data
			{{
				uint8_t(value),
				uint8_t(value >> 8U)
			}};
			return write(data);
		}

		SUBSTRATE_NO_DISCARD(bool readLE(uint32_t &value) const noexcept)
		{
			std::array<uint8_t, 4> data{};
			const bool result = read(data);
			value = (uint32_t(data[3]) << 24U) | (uint32_t(data[2]) << 16U) |
				(uint32_t(data[1]) << 8U) | data[0];
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeLE(const uint32_t value) const noexcept)
		{
			const std::array<uint8_t, 4> data
			{{
				uint8_t(value),
				uint8_t(value >> 8U),
				uint8_t(value >> 16U),
				uint8_t(value >> 24U)
			}};
			return write(data);
		}

		SUBSTRATE_NO_DISCARD(bool readLE(uint64_t &value) const noexcept)
		{
			std::array<uint8_t, 8> data{};
			const bool result = read(data);
			value = (uint64_t(data[7]) << 56U) | (uint64_t(data[6]) << 48U) |
				(uint64_t(data[5]) << 40U) | (uint64_t(data[4]) << 32U) |
				(uint64_t(data[3]) << 24U) | (uint64_t(data[2]) << 16U) |
				(uint64_t(data[1]) << 8U) | data[0];
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeLE(const uint64_t value) const noexcept)
		{
			const std::array<uint8_t, 8> data
			{{
				uint8_t(value),
				uint8_t(value >> 8U),
				uint8_t(value >> 16U),
				uint8_t(value >> 24U),
				uint8_t(value >> 32U),
				uint8_t(value >> 40U),
				uint8_t(value >> 48U),
				uint8_t(value >> 56U)
			}};
			return write(data);
		}

		template<typename T, typename = typename std::enable_if<
			std::is_integral<T>::value && !std::is_same<T, bool>::value &&
			std::is_signed<T>::value && sizeof(T) >= 2>::type
		>
		bool readLE(T &value) const noexcept
		{
			typename std::make_unsigned<T>::type data{};
			const auto result = readLE(data);
			value = static_cast<T>(data);
			return result;
		}

		template<typename T, typename = typename std::enable_if<
			std::is_integral<T>::value && !std::is_same<T, bool>::value &&
			std::is_signed<T>::value && sizeof(T) >= 2>::type
		>
		bool writeLE(const T value) const noexcept
		{
			auto data{static_cast<typename std::make_unsigned<T>::type>(value)};
			return writeLE(data);
		}

		SUBSTRATE_NO_DISCARD(bool readBE(uint16_t &value) const noexcept)
		{
			std::array<uint8_t, 2> data{};
			const bool result = read(data);
			value = uint16_t((uint16_t(data[0]) << 8U) | data[1]);
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeBE(const uint16_t value) const noexcept)
		{
			const std::array<uint8_t, 2> data
			{{
				uint8_t(value >> 8U),
				uint8_t(value)
			}};
			return write(data);
		}

		SUBSTRATE_NO_DISCARD(bool readBE(uint32_t &value) const noexcept)
		{
			std::array<uint8_t, 4> data{};
			const bool result = read(data);
			value = (uint32_t(data[0]) << 24U) | (uint32_t(data[1]) << 16U) |
				(uint32_t(data[2]) << 8U) | data[3];
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeBE(const uint32_t value) const noexcept)
		{
			const std::array<uint8_t, 4> data
			{{
				uint8_t(value >> 24U),
				uint8_t(value >> 16U),
				uint8_t(value >> 8U),
				uint8_t(value)
			}};
			return write(data);
		}

		SUBSTRATE_NO_DISCARD(bool readBE(uint64_t &value) const noexcept)
		{
			std::array<uint8_t, 8> data{};
			const bool result = read(data);
			value = (uint64_t(data[0]) << 56U) | (uint64_t(data[1]) << 48U) |
				(uint64_t(data[2]) << 40U) | (uint64_t(data[3]) << 32U) |
				(uint64_t(data[4]) << 24U) | (uint64_t(data[5]) << 16U) |
				(uint64_t(data[6]) << 8U) | data[7];
			return result;
		}

		SUBSTRATE_NO_DISCARD(bool writeBE(const uint64_t value) const noexcept)
		{
			const std::array<uint8_t, 8> data
			{{
				uint8_t(value >> 56U),
				uint8_t(value >> 48U),
				uint8_t(value >> 40U),
				uint8_t(value >> 32U),
				uint8_t(value >> 24U),
				uint8_t(value >> 16U),
				uint8_t(value >> 8U),
				uint8_t(value)
			}};
			return write(data);
		}

		template<typename T, typename = typename std::enable_if<
			std::is_integral<T>::value && !std::is_same<T, bool>::value &&
			std::is_signed<T>::value && sizeof(T) >= 2>::type
		>
		bool readBE(T &value) const noexcept
		{
			typename std::make_unsigned<T>::type data{};
			const auto result = readBE(data);
			value = static_cast<T>(data);
			return result;
		}

		template<typename T, typename = typename std::enable_if<
			std::is_integral<T>::value && !std::is_same<T, bool>::value &&
			std::is_signed<T>::value && sizeof(T) >= 2>::type
		>
		bool writeBE(const T value) const noexcept
		{
			auto data{static_cast<typename std::make_unsigned<T>::type>(value)};
			return writeBE(data);
		}

		SUBSTRATE_NO_DISCARD(bool seekRel(const off_t offset) const noexcept)
		{
			const off_t currentPos = tell();
			if (currentPos == -1 || currentPos + offset < 0)
				return false;
			return seek(offset, SEEK_CUR) == currentPos + offset;
		}

		SUBSTRATE_NO_DISCARD(mmap_t map(const int32_t prot, const int flags = MAP_SHARED) noexcept)
			{ return map(prot, length(), flags); }

		SUBSTRATE_NO_DISCARD(mmap_t map(const int32_t prot, const std::size_t len, const int flags, void* map_addr = nullptr) noexcept)
		{
			if (!valid())
				return {};
			const int32_t file = fd;
			invalidate();
			return {file, len, prot, flags, map_addr};
		}

		memfd_t(const memfd_t &) = delete;
		memfd_t &operator =(const memfd_t &) = delete;
	};

	template<size_t size> inline void swap(memfd_t<size> &a, memfd_t<size> &b) noexcept { a.swap(b); }
}

#endif /* SUBSTRATE_MEMFD */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
