// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_RWLOCK
#define SUBSTRATE_RWLOCK

#if __cplusplus < 201703L
#error "rwlock is on available on C++17 and above"
#endif

#include <substrate/internal/defs>

#include <utility>
#include <mutex>
#include <shared_mutex>

namespace substrate
{
	template<typename T>
	struct rwlock final {
	private:
		template<typename U, template<typename> typename lock_t>
		struct lock_result final {
		private:
			lock_t<std::shared_mutex> _lock;
			U& _obj;
		public:
			constexpr lock_result(std::shared_mutex& mut, U& obj) noexcept :
				_lock{mut}, _obj{obj} { }

			SUBSTRATE_NO_DISCARD(U* operator->() noexcept { return &_obj; })
			SUBSTRATE_NO_DISCARD(U& operator*() noexcept { return _obj; })
		};
		std::shared_mutex _mutex{};
		T _obj;
	public:
		template<typename ...args_t>
		constexpr rwlock(args_t&&... args) noexcept :
			_obj{std::forward<args_t>(args)...} { }

		SUBSTRATE_NO_DISCARD(lock_result<const T, std::shared_lock> read() noexcept {
			return {_mutex, _obj};
		})
		SUBSTRATE_NO_DISCARD(lock_result<T, std::unique_lock> write() noexcept {
			return {_mutex, _obj};
		})
	};
}

#endif /* SUBSTRATE_RWLOCK */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
