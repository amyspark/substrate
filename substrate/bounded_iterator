// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_BOUNDED_ITERATOR
#define SUBSTRATE_BOUNDED_ITERATOR

namespace substrate
{
	template<typename T> struct boundedIterator_t final
	{
	private:
		T *const data;
		size_t index;
		const size_t max;

		constexpr boundedIterator_t(T *const ptr, const size_t _index, const size_t _max) noexcept :
			data{ptr}, index{_index}, max{_max} { }

	public:
		using value_type = T;
		using pointer = T *;
		using reference = T &;

		constexpr boundedIterator_t(T *const ptr, const size_t _max) noexcept :
			data{ptr}, index{0}, max{_max} { }
		boundedIterator_t(const boundedIterator_t &) noexcept = default;
		boundedIterator_t(boundedIterator_t &&) noexcept = default;
		~boundedIterator_t() noexcept = default;
		boundedIterator_t &operator =(const boundedIterator_t &) noexcept = default;
		boundedIterator_t &operator =(boundedIterator_t &&) noexcept = default;

		reference operator *() const noexcept { return data[index]; }
		pointer operator ->() const noexcept { return data + index; }
		reference operator [](const size_t n) const noexcept { return *(*this + n); }
		boundedIterator_t operator +(const size_t n) const noexcept { return boundedIterator_t{*this} += n; }
		boundedIterator_t operator -(const size_t n) const noexcept { return boundedIterator_t{*this} -= n; }

		boundedIterator_t &operator ++() noexcept
		{
			if (index < max)
				++index;
			return *this;
		}

		const boundedIterator_t operator ++(int) noexcept
		{
			if (index < max)
				return {data, index++, max};
			return *this;
		}

		boundedIterator_t &operator --() noexcept
		{
			if (index > 0)
				--index;
			return *this;
		}

		const boundedIterator_t operator --(int) noexcept
		{
			if (index > 0)
				return {data, index--, max};
			return *this;
		}

		boundedIterator_t &operator +=(const size_t n) noexcept
		{
			(index + n) < max && (index + n) >= index ? index += n : index = max;
			return *this;
		}

		boundedIterator_t &operator -=(const size_t n) noexcept
		{
			n < index ? index -= n : index = 0;
			return *this;
		}

		bool operator ==(const boundedIterator_t &b) const noexcept
			{ return data == b.data && index == b.index && max == b.max; }
		bool operator !=(const boundedIterator_t &b) const noexcept { return !(*this == b); }
	};
}

#endif /*SUBSTRATE_BOUNDED_ITERATOR*/
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
