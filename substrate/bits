// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_BITS
#define SUBSTRATE_BITS

#include <cstddef>
#include <cstdint>
#include <limits>
#include <type_traits>

#if defined(_MSC_VER) && !defined(__clang__)
#include <cstdlib>
#include <intrin.h>
#endif

#include <substrate/internal/defs>

namespace substrate
{
	/* endian swapping facilities */
	// https://developercommunity.visualstudio.com/t/Missed-optimization:-bswap-uint64_t-and-/10352419#T-N10372694
	#if defined(_MSC_VER) && !defined(__clang__)
	SUBSTRATE_NO_DISCARD(inline uint8_t swap8(const uint8_t x) noexcept)
	{
		return _rotr8(x, 4);
	#else
	SUBSTRATE_NO_DISCARD(inline constexpr uint8_t swap8(const uint8_t x) noexcept)
	{
		return uint8_t(
			((x & 0x0FU) << 4U) |
			((x & 0xF0U) >> 4U)
		);
	#endif
	}

	#if defined(_MSC_VER) && !defined(__clang__) && _MSC_VER < 1934
	SUBSTRATE_NO_DISCARD(inline uint16_t swap16(const uint16_t x) noexcept)
	{
		return _byteswap_ushort(x);
	#else
	SUBSTRATE_NO_DISCARD(inline constexpr uint16_t swap16(const uint16_t x) noexcept)
	{
		return uint16_t(
			((x & 0x00FFU) << 8U) |
			((x & 0xFF00U) >> 8U)
		);
	#endif
	}

	#if defined(_MSC_VER) && !defined(__clang__) && _MSC_VER < 1934
	SUBSTRATE_NO_DISCARD(inline uint32_t swap32(const uint32_t x) noexcept)
	{
		return _byteswap_ulong(x);
	#else
	SUBSTRATE_NO_DISCARD(inline constexpr uint32_t swap32(const uint32_t x) noexcept)
	{
		return uint32_t(
			((x & 0x000000FFU) << 24U) |
			((x & 0x0000FF00U) << 8U ) |
			((x & 0x00FF0000U) >> 8U ) |
			((x & 0xFF000000U) >> 24U)
		);
	#endif
	}

	// https://developercommunity.visualstudio.com/t/Missed-optimization:-bswap-uint64_t-and-/10352419#T-N10372694
	#if defined(_MSC_VER) && !defined(__clang__)
	SUBSTRATE_NO_DISCARD(inline uint64_t swap64(const uint64_t x) noexcept)
	{
		return _byteswap_uint64(x);
	#else
	SUBSTRATE_NO_DISCARD(inline constexpr uint64_t swap64(const uint64_t x) noexcept)
	{
		return uint64_t(
			((x & 0x00000000000000FFU) << 56U) |
			((x & 0x000000000000FF00U) << 40U) |
			((x & 0x0000000000FF0000U) << 24U) |
			((x & 0x00000000FF000000U) << 8U ) |
			((x & 0x000000FF00000000U) >> 8U ) |
			((x & 0x0000FF0000000000U) >> 24U) |
			((x & 0x00FF000000000000U) >> 40U) |
			((x & 0xFF00000000000000U) >> 56U)
		);
	#endif
	}

	/* TODO: Determine if we can drop this and abstract rotl/rotr to shift by the fixed nibble amount */
	template<typename T> SUBSTRATE_NO_DISCARD(typename std::enable_if<std::is_integral<T>::value ,T>::type
		SUBSTRATE_CXX14_CONSTEXPR inline shift_nibble(const T value, const size_t shift) noexcept)
	{
		constexpr size_t width{sizeof(T) << 0x03U};
		const size_t left{(shift & ((sizeof(T) << 0x01U) + ~0x00U)) << 0x02U};
		const size_t right{(sizeof(T) << 0x03U) + 0x01U + ~((shift & ((sizeof(T) << 0x01U) + ~0x00U)) << 0x02U)};
		if (left >= width || right >= width)
			return value;
		return (((value | 0x00U) << left) | ((value | 0x00U) >> right));
	}

	template<typename T>
		SUBSTRATE_NO_DISCARD(inline typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value, T>::type
	rotl(T x, const std::size_t k) noexcept)
	{
		constexpr auto bits = std::numeric_limits<T>::digits;
		return (x << k) | (x >> (bits - k));
	}

	template<typename T>
		SUBSTRATE_NO_DISCARD(inline typename std::enable_if<std::is_integral<T>::value && std::is_unsigned<T>::value, T>::type
	rotr(T x, const std::size_t k) noexcept)
	{
		constexpr auto bits = std::numeric_limits<T>::digits;
		return (x >> k) | (x << (bits - k));
	}

}

#endif /* SUBSTRATE_BITS */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
