// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_ADVANCED_IO
#define SUBSTRATE_ADVANCED_IO

#include <cstdint>
#include <cstddef>
#include <sys/types.h>
#include <memory>
#include <array>

#include <substrate/internal/defs>

namespace substrate
{
	namespace advanced
	{
		struct readable_t
		{
		public:
			virtual ssize_t read(void *const bufferPtr, const size_t len,
				std::nullptr_t) const noexcept WARN_UNUSED = 0;

			bool read(void *const value, const size_t valueLen, size_t &resultLen) const noexcept WARN_UNUSED
			{
				const ssize_t result = read(value, valueLen, nullptr);
				if (result < 0)
					return false;
				resultLen = size_t(result);
				return resultLen == valueLen;
			}

			bool read(void *const value, const size_t valueLen) const noexcept WARN_UNUSED
			{
				size_t resultLen = 0;
				return read(value, valueLen, resultLen);
			}

			template<typename T> bool read(T &value) const noexcept
				{ return read(&value, sizeof(T)); }
			template<typename T> bool read(std::unique_ptr<T> &value) const noexcept
				{ return read(value.get(), sizeof(T)); }
			template<typename T> bool read(const std::unique_ptr<T> &value) const noexcept
				{ return read(value.get(), sizeof(T)); }
			template<typename T> bool read(const std::unique_ptr<T []> &value, const size_t valueCount) const noexcept
				{ return read(value.get(), sizeof(T) * valueCount); }
			template<typename T, size_t N> bool read(std::array<T, N> &value) const noexcept
				{ return read(value.data(), sizeof(T) * N); }

#ifdef SUBSTRATE_MANAGED_PTR
			template<typename T> enable_if_t<!std::is_array<T>::value, bool>
				read(const managedPtr_t<T> &value) const noexcept { return read(value.get(), sizeof(T)); }
			template<typename T> bool read(const managedPtr_t<T> &value, const size_t valueLen) const noexcept
				{ return read(value.get(), valueLen); }
#endif

#ifdef SUBSTRATE_FIXED_VECTOR
			template<typename T> bool read(const fixedVector_t<T> &value) const noexcept
				{ return read(value.data(), sizeof(T) * value.size()); }
#endif

			template<size_t length, typename T, size_t N> bool read(std::array<T, N> &value) const noexcept
			{
				static_assert(length <= N, "Can't request to read more than the std::array<> length");
				return read(value.data(), sizeof(T) * length);
			}

			bool readLE(uint16_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 2> data{};
				const bool result = read(data);
				value = (uint16_t(data[1]) << 8U) | data[0];
				return result;
			}

			bool readLE(uint32_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 4> data{};
				const bool result = read(data);
				value = (uint32_t(data[3]) << 24U) | (uint32_t(data[2]) << 16U) |
					(uint32_t(data[1]) << 8U) | data[0];
				return result;
			}

			bool readLE(uint64_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 8> data{};
				const bool result = read(data);
				value = (uint64_t(data[7]) << 56U) | (uint64_t(data[6]) << 48U) |
					(uint64_t(data[5]) << 40U) | (uint64_t(data[4]) << 32U) |
					(uint64_t(data[3]) << 24U) | (uint64_t(data[2]) << 16U) |
					(uint64_t(data[1]) << 8U) | data[0];
				return result;
			}

			template<typename T, typename = typename std::enable_if<
				std::is_integral<T>::value && !std::is_same<T, bool>::value &&
				std::is_signed<T>::value && sizeof(T) >= 2>::type
			>
			bool readLE(T &value) const noexcept
			{
				typename std::make_unsigned<T>::type data{};
				const auto result = readLE(data);
				value = static_cast<T>(data);
				return result;
			}

			bool readBE(uint16_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 2> data{};
				const bool result = read(data);
				value = (uint16_t(data[0]) << 8U) | data[1];
				return result;
			}

			bool readBE(uint32_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 4> data{};
				const bool result = read(data);
				value = (uint32_t(data[0]) << 24U) | (uint32_t(data[1]) << 16U) |
					(uint32_t(data[2]) << 8U) | data[3];
				return result;
			}

			bool readBE(uint64_t &value) const noexcept WARN_UNUSED
			{
				std::array<uint8_t, 8> data{};
				const bool result = read(data);
				value = (uint64_t(data[0]) << 56U) | (uint64_t(data[1]) << 48U) |
					(uint64_t(data[2]) << 40U) | (uint64_t(data[3]) << 32U) |
					(uint64_t(data[4]) << 24U) | (uint64_t(data[5]) << 16U) |
					(uint64_t(data[6]) << 8U) | data[7];
				return result;
			}

			template<typename T, typename = typename std::enable_if<
				std::is_integral<T>::value && !std::is_same<T, bool>::value &&
				std::is_signed<T>::value && sizeof(T) >= 2>::type
			>
			bool readBE(T &value) const noexcept
			{
				typename std::make_unsigned<T>::type data{};
				const auto result = readBE(data);
				value = static_cast<T>(data);
				return result;
			}
		};

		struct writeable_t
		{
		public:
			virtual ssize_t write(const void *const bufferPtr, const size_t valueLen,
				std::nullptr_t) const noexcept WARN_UNUSED = 0;

			bool write(const void *const value, const size_t valueLen) const noexcept WARN_UNUSED
			{
				const ssize_t result = write(value, valueLen, nullptr);
				if (result < 0)
					return false;
				return size_t(result) == valueLen;
			}

			template<typename T> bool write(const T &value) const noexcept
				{ return write(&value, sizeof(T)); }
			template<typename T> bool write(const std::unique_ptr<T> &value) const noexcept
				{ return write(value.get(), sizeof(T)); }
			template<typename T> bool write(const std::unique_ptr<T []> &value, const size_t valueCount) const noexcept
				{ return write(value.get(), sizeof(T) * valueCount); }
			template<typename T, size_t N> bool write(const std::array<T, N> &value) const noexcept
				{ return write(value.data(), sizeof(T) * N); }

#ifdef SUBSTRATE_MANAGED_PTR
			template<typename T> enable_if_t<!std::is_array<T>::value, bool>
				write(const managedPtr_t<T> &value) const noexcept { return write(value.get(), sizeof(T)); }
			template<typename T> bool write(const managedPtr_t<T> &value, const size_t valueLen) const noexcept
				{ return write(value.get(), valueLen); }
#endif

#ifdef SUBSTRATE_FIXED_VECTOR
			template<typename T> bool write(const fixedVector_t<T> &value) const noexcept
				{ return write(value.data(), sizeof(T) * value.size()); }
#endif

			template<size_t length, typename T, size_t N> bool write(const std::array<T, N> &value) const noexcept
			{
				static_assert(length <= N, "Can't request to write more than the std::array<> length");
				return write(value.data(), sizeof(T) * length);
			}

			bool writeLE(const uint16_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 2> data
				{
					uint8_t(value),
					uint8_t(value >> 8U)
				};
				return write(data);
			}

			bool writeLE(const uint32_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 4> data
				{
					uint8_t(value),
					uint8_t(value >> 8U),
					uint8_t(value >> 16U),
					uint8_t(value >> 24U)
				};
				return write(data);
			}

			bool writeLE(const uint64_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 8> data
				{
					uint8_t(value),
					uint8_t(value >> 8U),
					uint8_t(value >> 16U),
					uint8_t(value >> 24U),
					uint8_t(value >> 32U),
					uint8_t(value >> 40U),
					uint8_t(value >> 48U),
					uint8_t(value >> 56U)
				};
				return write(data);
			}

			template<typename T, typename = typename std::enable_if<
				std::is_integral<T>::value && !std::is_same<T, bool>::value &&
				std::is_signed<T>::value && sizeof(T) >= 2>::type
			>
			bool writeLE(const T value) const noexcept
			{
				auto data{static_cast<typename std::make_unsigned<T>::type>(value)};
				return writeLE(data);
			}

			bool writeBE(const uint16_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 2> data
				{
					uint8_t(value >> 8U),
					uint8_t(value)
				};
				return write(data);
			}

			bool writeBE(const uint32_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 4> data
				{
					uint8_t(value >> 24U),
					uint8_t(value >> 16U),
					uint8_t(value >> 8U),
					uint8_t(value)
				};
				return write(data);
			}

			bool writeBE(const uint64_t value) const noexcept WARN_UNUSED
			{
				const std::array<uint8_t, 8> data
				{
					uint8_t(value >> 56U),
					uint8_t(value >> 48U),
					uint8_t(value >> 40U),
					uint8_t(value >> 32U),
					uint8_t(value >> 24U),
					uint8_t(value >> 16U),
					uint8_t(value >> 8U),
					uint8_t(value)
				};
				return write(data);
			}

			template<typename T, typename = typename std::enable_if<
				std::is_integral<T>::value && !std::is_same<T, bool>::value &&
				std::is_signed<T>::value && sizeof(T) >= 2>::type
			>
			bool writeBE(const T value) const noexcept
			{
				auto data{static_cast<typename std::make_unsigned<T>::type>(value)};
				return writeBE(data);
			}
		};

		struct io_t : readable_t, writeable_t { };
	}
}

#endif /* SUBSTRATE_ADVANCED_IO */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
