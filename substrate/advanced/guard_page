// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_ADVANCED_GUARD_PAGE
#define SUBSTRATE_ADVANCED_GUARD_PAGE
#ifdef _WINDOWS
#	error "guard_page is a *nix only header"
#endif

#include <substrate/internal/defs>
#include <substrate/utility>

#include <substrate/mmap>

#include <unistd.h>

namespace substrate
{
	namespace advanced
	{
		struct guard_page final
		{
		private:
			int64_t _page_size{sysconf(_SC_PAGESIZE)};
			substrate::mmap_t _guard_map;

			guard_page(void *addr) noexcept :
				_guard_map{-1, _page_size, PROT_NONE, MAP_PRIVATE | MAP_ANONYMOUS, addr}
			{ }

		public:
			guard_page() noexcept :
				_guard_map{-1, _page_size, PROT_NONE, MAP_PRIVATE | MAP_ANONYMOUS}
			{ }
			guard_page(guard_page &) = delete;
			guard_page(const guard_page &) = delete;
			guard_page(guard_page &&page) noexcept : guard_page{} { swap(page); }
			guard_page &operator =(const guard_page &) = delete;
			~guard_page() noexcept = default;

			SUBSTRATE_NO_DISCARD(bool valid() const noexcept) { return _guard_map.valid(); }
			SUBSTRATE_NO_DISCARD(int64_t length() const noexcept) { return _page_size; }

			SUBSTRATE_NO_DISCARD(std::uintptr_t address() const noexcept) { return _guard_map.numeric_address(); }
			SUBSTRATE_NO_DISCARD(std::uintptr_t next() const noexcept) { return address() + _page_size; }

			SUBSTRATE_NO_DISCARD(guard_page bound() const) { return bound(_page_size); }
			SUBSTRATE_NO_DISCARD(guard_page bound(size_t distance) const)
			{
				// NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
				return {reinterpret_cast<void *>(address() + distance)}; // lgtm[cpp/reinterpret-cast]
			}

			void swap(guard_page &page) noexcept
			{
				std::swap(_guard_map, page._guard_map);
			}
		};

		inline void swap(guard_page &a, guard_page &b) noexcept { a.swap(b); }
	}
}

#endif /* SUBSTRATE_ADVANCED_GUARD_PAGE */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
