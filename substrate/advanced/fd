// SPDX-License-Identifier: BSD-3-Clause
#ifndef SUBSTRATE_ADVANCED_FD
#define SUBSTRATE_ADVANCED_FD

#include <substrate/fd>
#include <substrate/advanced/io>

namespace substrate
{
	namespace advanced
	{
		struct fd_t final : seekableIO_t
		{
		private:
			substrate::fd_t fd;

		public:
			constexpr fd_t() noexcept = default;
			constexpr fd_t(const int32_t fd_) noexcept : fd{fd_} { }
			fd_t(const char *const file, const int flags, const mode_t mode = 0) noexcept :
				fd{file, flags, mode} { }
			fd_t(const std::string& file, const int flags, const mode_t mode = 0) noexcept :
				fd{file.c_str(), flags, mode} { }
			fd_t(fd_t &&fd_) noexcept : fd{std::move(fd_.fd)} { }
			~fd_t() noexcept final = default;
			SUBSTRATE_NO_DISCARD(operator int32_t() const noexcept) { return fd; }
			SUBSTRATE_NO_DISCARD(bool operator ==(const int32_t desc) const noexcept) { return fd == desc; }
			SUBSTRATE_NO_DISCARD(bool valid() const noexcept final) { return fd.valid(); }
			SUBSTRATE_NO_DISCARD(bool isEOF() const noexcept) { return fd.isEOF(); }
			void invalidate() noexcept { fd.invalidate(); }
			void swap(fd_t &desc) noexcept { std::swap(fd, desc.fd); }

			SUBSTRATE_NO_DISCARD(ssize_t read(void *const bufferPtr, const size_t bufferLen, std::nullptr_t)
				const noexcept final) { return fd.read(bufferPtr, bufferLen, nullptr); }
			SUBSTRATE_NO_DISCARD(ssize_t write(const void *const bufferPtr, const size_t bufferLen, std::nullptr_t)
				const noexcept final) { return fd.write(bufferPtr, bufferLen, nullptr); }
			SUBSTRATE_NO_DISCARD(off_t seek(const off_t offset, const int32_t whence) const noexcept final)
				{ return fd.seek(offset, whence); }
			SUBSTRATE_NO_DISCARD(off_t tell() const noexcept final) { return fd.tell(); }
			SUBSTRATE_NO_DISCARD(off_t length() const noexcept final) { return fd.length(); }
			SUBSTRATE_NO_DISCARD(substrate::internal::stat_t stat() const noexcept)
				{ return fd.stat(); }

			using readable_t::read;
			using writeable_t::write;
		};

		inline void swap(fd_t &a, fd_t &b) noexcept { a.swap(b); }
	}
}

#endif /* SUBSTRATE_ADVANCED_FD */
/* vim: set ft=cpp ts=4 sw=4 noexpandtab: */
