name: GitHub Actions

on:
  push:
    branches-ignore:
      - 'coverityScan'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: ${{ matrix.os.id }}
    strategy:
      matrix:
        os:
          - { id: ubuntu-20.04, name: focal }
        compiler:
          - 'clang-9'
          - 'clang-10'
          - 'clang-11'
          - 'clang-12'
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
          - 'gcc-10'
          - 'gcc-11'
        cpp_std:
          - 'c++11'
          - 'c++14'
          - 'c++17'
        include:
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-6.0'
            cpp_std: 'c++11'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-6.0'
            cpp_std: 'c++14'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-6.0'
            cpp_std: 'c++17'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-7'
            cpp_std: 'c++11'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-7'
            cpp_std: 'c++14'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-7'
            cpp_std: 'c++17'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-8'
            cpp_std: 'c++11'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-8'
            cpp_std: 'c++14'
          - os: { id: ubuntu-18.04, name: bionic }
            compiler: 'clang-8'
            cpp_std: 'c++17'
          ## GCC6 cannot handle constexpr-ness of mmap_t
          ## See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66297
          # - os: { id: ubuntu-18.04, name: bionic }
          #   compiler: 'gcc-6'
          #   cpp_std: 'c++11'
          # - os: { id: ubuntu-18.04, name: bionic }
          #   compiler: 'gcc-6'
          #   cpp_std: 'c++14'
          # - os: { id: ubuntu-18.04, name: bionic }
          #   compiler: 'gcc-6'
          #   cpp_std: 'c++17'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          wget https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-key add llvm-snapshot.gpg.key
          rm llvm-snapshot.gpg.key
          sudo apt-add-repository "deb https://apt.llvm.org/${{ matrix.os.name }}/ llvm-toolchain-${{ matrix.os.name }} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.compiler }}
        working-directory: ${{ runner.temp }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          sudo python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }}
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
  build-windows:
    name: 'build-windows (${{ matrix.os }}, msvc, ${{ matrix.cpp_std }})'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-2019
          - windows-2022
        cpp_std:
          - 'c++14'
          - 'c++17'
      fail-fast: false
    env:
      CC: cl.exe
      CXX: cl.exe
      LD: link.exe
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC  || true
          $LD  || true
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }} --buildtype=debug
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
  build-windows-mingw:
    name: 'build-mingw (${{ matrix.os }}, ${{ matrix.sys.abi }}, ${{ matrix.cpp_std }})'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        os:
          - windows-2019
        sys:
          - { abi: mingw64, env: x86_64,       compiler: gcc }
          - { abi: ucrt64,  env: ucrt-x86_64,  compiler: gcc }
          - { abi: clang64, env: clang-x86_64, compiler: clang }
        cpp_std:
          - 'c++11'
          - 'c++14'
          - 'c++17'
      fail-fast: false
    steps:
      - name: Use MinGW from MSYS
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys.abi}}
          update: true
          path-type: inherit
          install: >-
            mingw-w64-${{matrix.sys.env}}-toolchain
      - name: Runtime environment
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup compiler
        if: startsWith(matrix.sys.abi, 'mingw64') || startsWith(matrix.sys.abi, 'ucrt64')
        run: |
          CXX=${CC/#gcc/g++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.sys.compiler }}
      - name: Setup compiler
        if: startsWith(matrix.sys.abi, 'clang64')
        run: |
          CXX=${CC/#clang/clang++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          CC: ${{ matrix.sys.compiler }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        run: |
          $CC --version
          $CXX --version
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }} --buildtype=debug
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-12
          - macos-11
        cpp_std:
          - 'c++11'
          - 'c++14'
          - 'c++17'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          brew install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          cc --version  || true
          ld --version || true
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }} --buildtype=debug
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
  build-macos-homebrew:
    # Apple LLD is unable to link GCC < 11 generated object files.
    # https://stackoverflow.com/questions/73714336/xcode-update-to-version-2395-ld-compile-problem-occurs-computedatomcount-m
    # rdar://FB11369327
    runs-on: macos-11
    strategy:
      matrix:
        compiler:
          ## GCC5 cannot compile anything on macOS
          # - gcc@5
          ## GCC6 cannot handle constexpr-ness of mmap_t
          ## See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66297
          # - gcc@6
          - gcc@7
          - gcc@8
          - gcc@9
          - gcc@10
          - gcc@11
          - gcc
        cpp_std:
          - 'c++11'
          - 'c++14'
          - 'c++17'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "GITHUB_WORKSPACE=`pwd`" >> $GITHUB_ENV
      - name: Setup compiler
        shell: bash
        run: |
          brew install ${{ matrix.compiler }}
          CC=${COMPILER/@/-}
          CXX=${CC/#gcc/g++}
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
        env:
          COMPILER: ${{ matrix.compiler }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          brew install meson ninja
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }} --buildtype=debug
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
